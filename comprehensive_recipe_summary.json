{
  "extractionDate": "2025-09-16",
  "totalRecipes": 898,
  "repositorySummary": {
    "rewrite-core": 354,
    "rewrite-spring": 132,
    "rewrite-testing-frameworks": 105,
    "rewrite-migrate-java": 134,
    "rewrite-static-analysis": 148,
    "rewrite-logging-frameworks": 25
  },
  "recipeTypes": {
    "Testing": 128,
    "Java": 321,
    "Migration": 175,
    "Static Analysis": 156,
    "Spring": 91,
    "Logging": 27
  },
  "recipes": [
    {
      "className": "MavenOnlyRecipe",
      "displayName": "Fail if run on not-maven",
      "description": "Super description.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/test/java/org/openrewrite/maven/AssertionsTest.java"
    },
    {
      "className": "ChangeManagedDependencyGroupIdAndArtifactId",
      "displayName": "Change Maven managed dependency groupId, artifactId and optionally the version",
      "description": "Change the groupId, artifactId and optionally the version of a specified Maven managed dependency.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangeManagedDependencyGroupIdAndArtifactId.java"
    },
    {
      "className": "RemoveRedundantDependencyVersions",
      "displayName": "Remove redundant explicit dependency and plugin versions",
      "description": "Remove explicitly-specified dependency/plugin versions when a parent POM's `dependencyManagement`/`pluginManagement` ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemoveRedundantDependencyVersions.java"
    },
    {
      "className": "AddProfile",
      "displayName": "Add Maven profile",
      "description": "Add a maven profile to a `pom.xml` file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddProfile.java"
    },
    {
      "className": "RemoveManagedDependency",
      "displayName": "Remove Maven managed dependency",
      "description": "Removes a single managed dependency from the <dependencyManagement><dependencies> section of the pom.xml.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemoveManagedDependency.java"
    },
    {
      "className": "ChangeDependencyScope",
      "displayName": "Change Maven dependency scope",
      "description": "Add or alter the scope of the specified dependency.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangeDependencyScope.java"
    },
    {
      "className": "UpdateMavenWrapper",
      "displayName": "Update Maven wrapper",
      "description": "Update the version of Maven used in an existing Maven wrapper.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/UpdateMavenWrapper.java"
    },
    {
      "className": "UpgradeTransitiveDependencyVersion",
      "displayName": "Upgrade transitive Maven dependencies",
      "description": "Upgrades the version of a transitive dependency in a Maven pom file. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/UpgradeTransitiveDependencyVersion.java"
    },
    {
      "className": "ChangeDependencyClassifier",
      "displayName": "Change Maven dependency classifier",
      "description": "Add or alter the classifier of the specified dependency.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangeDependencyClassifier.java"
    },
    {
      "className": "ChangeParentPom",
      "displayName": "Change Maven parent",
      "description": "Change the parent pom of a Maven pom.xml by matching the existing parent via groupId and artifactId, ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangeParentPom.java"
    },
    {
      "className": "EnableDevelocityBuildCache",
      "displayName": "Enable Develocity build cache",
      "description": "Add Develocity build cache configuration to any `.mvn/` Develocity configuration file that lack existing configuration.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/EnableDevelocityBuildCache.java"
    },
    {
      "className": "IncrementProjectVersion",
      "displayName": "Increment Maven project version",
      "description": "Increase Maven project version by incrementing either the major, minor, or patch version as defined by ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/IncrementProjectVersion.java"
    },
    {
      "className": "RenamePropertyKey",
      "displayName": "Rename Maven property key",
      "description": "Rename the specified Maven project property key leaving the value unchanged.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RenamePropertyKey.java"
    },
    {
      "className": "ChangeDependencyGroupIdAndArtifactId",
      "displayName": "Change Maven dependency",
      "description": "Change a Maven dependency coordinates. The `newGroupId` or `newArtifactId` **MUST** be different from before. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangeDependencyGroupIdAndArtifactId.java"
    },
    {
      "className": "AddRuntimeConfig",
      "displayName": "Add a configuration option for the Maven runtime",
      "description": "Add a new configuration option for the Maven runtime if not already present.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddRuntimeConfig.java"
    },
    {
      "className": "ChangePackaging",
      "displayName": "Set Maven project packaging",
      "description": "Sets the packaging type of Maven projects. Either adds the packaging tag if it is missing or changes its context if present.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangePackaging.java"
    },
    {
      "className": "RemoveExclusion",
      "displayName": "Remove exclusion",
      "description": "Remove any matching exclusion from any matching dependency.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemoveExclusion.java"
    },
    {
      "className": "AddPlugin",
      "displayName": "Add Maven plugin",
      "description": "Add the specified Maven plugin to the pom.xml.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddPlugin.java"
    },
    {
      "className": "ChangeProjectVersion",
      "displayName": "Change Maven Project Version",
      "description": "Change the project version of a Maven pom.xml. Identifies the project to be changed by its groupId and artifactId. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangeProjectVersion.java"
    },
    {
      "className": "UpgradePluginVersion",
      "displayName": "Upgrade Maven plugin version",
      "description": "Upgrade the version of a plugin using Node Semver advanced range selectors, ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/UpgradePluginVersion.java"
    },
    {
      "className": "AddCommentToMavenDependency",
      "displayName": "Add a comment to a `Maven` dependency",
      "description": "Adds a comment as the first element in a `Maven` dependency.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddCommentToMavenDependency.java"
    },
    {
      "className": "UseMavenCompilerPluginReleaseConfiguration",
      "displayName": "Use Maven compiler plugin release configuration",
      "description": "Replaces any explicit `source` or `target` configuration (if present) on the `maven-compiler-plugin` with ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/UseMavenCompilerPluginReleaseConfiguration.java"
    },
    {
      "className": "RemoveDuplicateDependencies",
      "displayName": "Remove duplicate Maven dependencies",
      "description": "Removes duplicated dependencies in the `<dependencies>` and `<dependencyManagement>` sections of the `pom.xml`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemoveDuplicateDependencies.java"
    },
    {
      "className": "RemovePlugin",
      "displayName": "Remove Maven plugin",
      "description": "Remove the specified Maven plugin from the POM.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemovePlugin.java"
    },
    {
      "className": "UpgradeParentVersion",
      "displayName": "Upgrade Maven parent project version",
      "description": "Set the parent pom version number according to a [version selector](https://docs.openrewrite.org/reference/dependency-version-selectors) ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/UpgradeParentVersion.java"
    },
    {
      "className": "UpdateMavenProjectPropertyJavaVersion",
      "displayName": "Update Maven Java project properties",
      "description": "",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/UpdateMavenProjectPropertyJavaVersion.java"
    },
    {
      "className": "AddPluginDependency",
      "displayName": "Add Maven plugin dependencies",
      "description": "Adds the specified dependencies to a Maven plugin. Will not add the plugin if it does not already exist in the pom.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddPluginDependency.java"
    },
    {
      "className": "AddParentPom",
      "displayName": "Add Maven parent",
      "description": "Add a parent pom to a Maven pom.xml. Does nothing if a parent pom is already present.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddParentPom.java"
    },
    {
      "className": "ChangePluginConfiguration",
      "displayName": "Change Maven plugin configuration",
      "description": "Apply the specified configuration to a Maven plugin. Will not add the plugin if it does not already exist in the pom.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangePluginConfiguration.java"
    },
    {
      "className": "UpdateScmFromGitOrigin",
      "displayName": "Update SCM with Git origin",
      "description": "Updates or adds the Maven `<scm>` tag based on the Git remote origin. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/UpdateScmFromGitOrigin.java"
    },
    {
      "className": "ManageDependencies",
      "displayName": "Manage dependencies",
      "description": "Make existing dependencies managed by moving their version to be specified in the dependencyManagement section of the POM.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ManageDependencies.java"
    },
    {
      "className": "ChangePluginDependencies",
      "displayName": "Change Maven plugin dependencies",
      "description": "Applies the specified dependencies to a Maven plugin. Will not add the plugin if it does not already exist in the pom.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangePluginDependencies.java"
    },
    {
      "className": "RemoveRedundantProperties",
      "displayName": "Remove redundant properties",
      "description": "Remove properties when a parent POM specifies the same property.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemoveRedundantProperties.java"
    },
    {
      "className": "UpgradeDependencyVersion",
      "displayName": "Upgrade Maven dependency version",
      "description": "Upgrade the version of a dependency by specifying a group and (optionally) an artifact using Node Semver ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/UpgradeDependencyVersion.java"
    },
    {
      "className": "RemoveUnusedProperties",
      "displayName": "Remove unused properties",
      "description": "Detect and remove Maven property declarations which do not have any usage within the project.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemoveUnusedProperties.java"
    },
    {
      "className": "RemoveRepository",
      "displayName": "Remove repository",
      "description": "Removes a matching Maven repository.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemoveRepository.java"
    },
    {
      "className": "AddDependency",
      "displayName": "Add Maven dependency",
      "description": "Add a Maven dependency to a `pom.xml` file in the correct scope based on where it is used.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddDependency.java"
    },
    {
      "className": "OrderPomElements",
      "displayName": "Order POM elements",
      "description": "Order POM elements according to the [recommended](https://maven.apache.org/developers/conventions/code.html#pom-code-convention) order.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/OrderPomElements.java"
    },
    {
      "className": "ModernizeObsoletePoms",
      "displayName": "Modernize obsolete Maven poms",
      "description": "Very old Maven poms are no longer supported by current versions of Maven. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ModernizeObsoletePoms.java"
    },
    {
      "className": "AddProperty",
      "displayName": "Add Maven project property",
      "description": "Add a new property to the Maven project property. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddProperty.java"
    },
    {
      "className": "ExcludeDependency",
      "displayName": "Exclude Maven dependency",
      "description": "Exclude specified dependency from any dependency that transitively includes it.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ExcludeDependency.java"
    },
    {
      "className": "ChangePluginGroupIdAndArtifactId",
      "displayName": "Change Maven plugin group and artifact ID",
      "description": "Change the groupId and/or the artifactId of a specified Maven plugin. Optionally update the plugin version. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangePluginGroupIdAndArtifactId.java"
    },
    {
      "className": "AddManagedDependency",
      "displayName": "Add managed Maven dependency",
      "description": "Add a managed Maven dependency to a `pom.xml` file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddManagedDependency.java"
    },
    {
      "className": "ChangePluginExecutions",
      "displayName": "Change Maven plugin executions",
      "description": "Apply the specified executions to a Maven plugin. Will not add the plugin if it does not already exist in the pom.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangePluginExecutions.java"
    },
    {
      "className": "RemovePluginDependency",
      "displayName": "Remove Maven plugin dependency",
      "description": "Removes a dependency from the <dependencies> section of a plugin in the pom.xml.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemovePluginDependency.java"
    },
    {
      "className": "ChangePropertyValue",
      "displayName": "Change Maven project property value",
      "description": "Changes the specified Maven project property value leaving the key intact.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/ChangePropertyValue.java"
    },
    {
      "className": "AddAnnotationProcessor",
      "displayName": "Add an annotation processor to `maven-compiler-plugin`",
      "description": "Add an annotation processor to the maven compiler plugin. Will not do anything if it already exists. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddAnnotationProcessor.java"
    },
    {
      "className": "RemoveDependency",
      "displayName": "Remove Maven dependency",
      "description": "Removes a single dependency from the <dependencies> section of the pom.xml.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemoveDependency.java"
    },
    {
      "className": "RemoveProperty",
      "displayName": "Remove Maven project property",
      "description": "Removes the specified Maven project property from the pom.xml.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/RemoveProperty.java"
    },
    {
      "className": "AddDevelocityMavenExtension",
      "displayName": "Add the Develocity Maven extension",
      "description": "To integrate the Develocity Maven extension into Maven projects, ensure that the ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddDevelocityMavenExtension.java"
    },
    {
      "className": "AddRepository",
      "displayName": "Add repository",
      "description": "Adds a new Maven Repository or updates a matching repository.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/AddRepository.java"
    },
    {
      "className": "UseHttpsForRepositories",
      "displayName": "Use HTTPS for repositories",
      "description": "Use HTTPS for repository URLs.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/security/UseHttpsForRepositories.java"
    },
    {
      "className": "DependencyPluginGoalResolveSources",
      "displayName": "Migrate to `maven-dependency-plugin` goal `resolve-sources`",
      "description": "Migrate from `sources` to `resolve-sources` for the `maven-dependency-plugin`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/plugin/DependencyPluginGoalResolveSources.java"
    },
    {
      "className": "ModuleHasDependency",
      "displayName": "Module has dependency",
      "description": "Searches for Maven modules that have a dependency matching the specified groupId and artifactId. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/ModuleHasDependency.java"
    },
    {
      "className": "FindDependency",
      "displayName": "Find Maven dependency",
      "description": "Finds first-order dependency uses, i.e. dependencies that are defined directly in a project.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/FindDependency.java"
    },
    {
      "className": "FindMavenSettings",
      "displayName": "Find effective maven settings",
      "description": "List the effective maven settings file for the current project.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/FindMavenSettings.java"
    },
    {
      "className": "ModuleHasPlugin",
      "displayName": "Module has plugin",
      "description": "Searches for Maven modules that have a plugin matching the specified groupId and artifactId. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/ModuleHasPlugin.java"
    },
    {
      "className": "DependencyInsight",
      "displayName": "Maven dependency insight",
      "description": "Find direct and transitive dependencies matching a group, artifact, and scope. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/DependencyInsight.java"
    },
    {
      "className": "DoesNotIncludeDependency",
      "displayName": "Does not include Maven dependency",
      "description": "A precondition which returns false if visiting a Maven pom which includes the specified dependency in the classpath of some scope. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/DoesNotIncludeDependency.java"
    },
    {
      "className": "FindProperties",
      "displayName": "Find Maven project properties",
      "description": "Finds the specified Maven project properties within a pom.xml.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/FindProperties.java"
    },
    {
      "className": "FindScm",
      "displayName": "Find SCM tag",
      "description": "Finds any `<scm>` tag directly inside the `<project>` root of a Maven pom.xml file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/FindScm.java"
    },
    {
      "className": "FindManagedDependency",
      "displayName": "Find Maven dependency management entry",
      "description": "Finds first-order dependency management entries, i.e. dependencies that are defined directly in a project.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/FindManagedDependency.java"
    },
    {
      "className": "FindRepositoryOrder",
      "displayName": "Maven repository order",
      "description": "Determine the order in which dependencies will be resolved for each `pom.xml` based on its defined repositories and effective `settings.xml`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/FindRepositoryOrder.java"
    },
    {
      "className": "ParentPomInsight",
      "displayName": "Maven parent insight",
      "description": "Find Maven parents matching a `groupId` and `artifactId`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/ParentPomInsight.java"
    },
    {
      "className": "FindMavenProject",
      "displayName": "Find Maven projects",
      "description": "Maven projects are `pom.xml` files with a `MavenResolutionResult` marker.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/FindMavenProject.java"
    },
    {
      "className": "EffectiveDependencies",
      "displayName": "Effective dependencies",
      "description": "Emit the data of binary dependency relationships.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/EffectiveDependencies.java"
    },
    {
      "className": "EffectiveMavenRepositories",
      "displayName": "List effective Maven repositories",
      "description": "Lists the Maven repositories that would be used for dependency resolution, in order of precedence. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/EffectiveMavenRepositories.java"
    },
    {
      "className": "EffectiveManagedDependencies",
      "displayName": "Effective managed dependencies",
      "description": "Emit the data of binary dependency relationships.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/EffectiveManagedDependencies.java"
    },
    {
      "className": "FindPlugin",
      "displayName": "Find Maven plugin",
      "description": "Finds a Maven plugin within a pom.xml.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/search/FindPlugin.java"
    },
    {
      "className": "PrintMavenAsDot",
      "displayName": "Print Maven dependency hierarchy in DOT format",
      "description": "The DOT language format is specified [here](https://graphviz.org/doc/info/lang.html).",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/utilities/PrintMavenAsDot.java"
    },
    {
      "className": "ExplicitPluginVersion",
      "displayName": "Add explicit plugin versions",
      "description": "Add explicit plugin versions to POMs for reproducibility, as [MNG-4173](https://issues.apache.org/jira/browse/MNG-4173) removes automatic version resolution for POM plugins.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/cleanup/ExplicitPluginVersion.java"
    },
    {
      "className": "ExplicitPluginGroupId",
      "displayName": "Add explicit `groupId` to Maven plugins",
      "description": "Add the default `<groupId>org.apache.maven.plugins</groupId>` to plugins for clarity.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/cleanup/ExplicitPluginGroupId.java"
    },
    {
      "className": "DependencyManagementDependencyRequiresVersion",
      "displayName": "Dependency management dependencies should have a version",
      "description": "If they don't have a version, they can't possibly affect dependency resolution anywhere, and can be safely removed.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-maven/src/main/java/org/openrewrite/maven/cleanup/DependencyManagementDependencyRequiresVersion.java"
    },
    {
      "className": "AddKeyValue",
      "displayName": "Add value to JSON Object",
      "description": "Adds a `value` at the specified `keyPath` with the specified `key`, if the key doesn't already exist.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-json/src/main/java/org/openrewrite/json/AddKeyValue.java"
    },
    {
      "className": "ChangeKey",
      "displayName": "Change key",
      "description": "Change a JSON mapping entry key, while leaving the value intact.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-json/src/main/java/org/openrewrite/json/ChangeKey.java"
    },
    {
      "className": "DeleteKey",
      "displayName": "Delete key",
      "description": "Delete a JSON mapping entry key.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-json/src/main/java/org/openrewrite/json/DeleteKey.java"
    },
    {
      "className": "ChangeValue",
      "displayName": "Change value",
      "description": "Change a JSON mapping entry value leaving the key intact.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-json/src/main/java/org/openrewrite/json/ChangeValue.java"
    },
    {
      "className": "FindKey",
      "displayName": "Find JSON object members",
      "description": "Find JSON object members by JsonPath expression.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-json/src/main/java/org/openrewrite/json/search/FindKey.java"
    },
    {
      "className": "WrappingAndBraces",
      "displayName": "JSON new lines",
      "description": "Split members into separate lines in JSON.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-json/src/main/java/org/openrewrite/json/format/WrappingAndBraces.java"
    },
    {
      "className": "AutoFormat",
      "displayName": "Format JSON",
      "description": "Format JSON code using a standard comprehensive set of JSON formatting recipes.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-json/src/main/java/org/openrewrite/json/format/AutoFormat.java"
    },
    {
      "className": "Indents",
      "displayName": "JSON indent",
      "description": "Format tabs and indents in JSON.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-json/src/main/java/org/openrewrite/json/format/Indents.java"
    },
    {
      "className": "WriteModel",
      "displayName": "Write the AST model",
      "description": "Expand the model into an AST with Lombok annotations, Padding classes, etc.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/tools/language-parser-builder/src/model/java/generate/WriteModel.java"
    },
    {
      "className": "WritePrinter",
      "displayName": "Write the boilerplate for `TomlPrinter`",
      "description": "Every print method starts with `visitSpace` then `visitMarkers`. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/tools/language-parser-builder/src/model/java/generate/WritePrinter.java"
    },
    {
      "className": "WriteVisitorMethods",
      "displayName": "Write TOML boilerplate",
      "description": "Write the boilerplate for `TomlVisitor` and `TomlIsoVisitor`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/tools/language-parser-builder/src/model/java/generate/WriteVisitorMethods.java"
    },
    {
      "className": "WritePaddingAccessors",
      "displayName": "Write accessors for padded parts of the model",
      "description": "Write accessors for padded parts of the model.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/tools/language-parser-builder/src/model/java/generate/WritePaddingAccessors.java"
    },
    {
      "className": "AppendToSequence",
      "displayName": "Append to sequence",
      "description": "Append item to YAML sequence.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/AppendToSequence.java"
    },
    {
      "className": "ChangeKey",
      "displayName": "Change key",
      "description": "Change a YAML mapping entry key while leaving the value intact.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/ChangeKey.java"
    },
    {
      "className": "UnfoldProperties",
      "displayName": "Unfold YAML properties",
      "description": "Transforms dot-separated property keys in YAML files into nested map hierarchies to enhance clarity and readability, or for compatibility with tools expecting structured YAML.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/UnfoldProperties.java"
    },
    {
      "className": "ChangePropertyKey",
      "displayName": "Change property key",
      "description": "Change a YAML property key while leaving the value intact. Expects dot notation for nested YAML mappings, similar to how Spring Boot interprets `application.yml` files.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/ChangePropertyKey.java"
    },
    {
      "className": "CreateYamlFile",
      "displayName": "Create YAML file",
      "description": "Create a new YAML file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/CreateYamlFile.java"
    },
    {
      "className": "CopyValue",
      "displayName": "Copy YAML value",
      "description": "Copies a YAML value from one key to another. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/CopyValue.java"
    },
    {
      "className": "CommentOutProperty",
      "displayName": "Comment out property",
      "description": "Comment out a YAML property and add a comment in front.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/CommentOutProperty.java"
    },
    {
      "className": "CoalesceProperties",
      "displayName": "Coalesce YAML properties",
      "description": "Simplify nested map hierarchies into their simplest dot separated property form, similar to how Spring Boot interprets `application.yml` files.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/CoalesceProperties.java"
    },
    {
      "className": "DeleteKey",
      "displayName": "Delete key",
      "description": "Delete a YAML mapping entry key.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/DeleteKey.java"
    },
    {
      "className": "ChangePropertyValue",
      "displayName": "Change YAML property",
      "description": "Change a YAML property. Expects dot notation for nested YAML mappings, similar to how Spring Boot interprets `application.yml` files.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/ChangePropertyValue.java"
    },
    {
      "className": "DeleteProperty",
      "displayName": "Delete property",
      "description": "Delete a YAML property. Nested YAML mappings are interpreted as dot separated property names, i.e. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/DeleteProperty.java"
    },
    {
      "className": "MergeYaml",
      "displayName": "Merge YAML snippet",
      "description": "Merge a YAML snippet with an existing YAML document.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/MergeYaml.java"
    },
    {
      "className": "ChangeValue",
      "displayName": "Change value",
      "description": "Change a YAML mapping entry value while leaving the key intact.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/ChangeValue.java"
    },
    {
      "className": "FindKey",
      "displayName": "Find YAML entries",
      "description": "Find YAML entries that match the specified [JsonPath](https://docs.openrewrite.org/reference/jsonpath-and-jsonpathmatcher-reference) expression.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/search/FindKey.java"
    },
    {
      "className": "FindProperty",
      "displayName": "Find YAML properties",
      "description": "Find YAML properties that match the specified `propertyKey`. Expects dot notation for nested YAML mappings, similar to how Spring Boot interprets `application.yml` files.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/search/FindProperty.java"
    },
    {
      "className": "RemoveUnused",
      "displayName": "Remove unused YAML",
      "description": "Remove YAML mappings and sequence keys that have no value.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/cleanup/RemoveUnused.java"
    },
    {
      "className": "Indents",
      "displayName": "YAML indent",
      "description": "Format tabs and indents in YAML.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-yaml/src/main/java/org/openrewrite/yaml/format/Indents.java"
    },
    {
      "className": "GStringCurlyBraces",
      "displayName": "Groovy GString curly braces",
      "description": "In Groovy [GStrings](https://docs.groovy-lang.org/latest/html/api/groovy/lang/GString.html), curly braces are optional for single variable expressions. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-groovy/src/main/java/org/openrewrite/groovy/format/GStringCurlyBraces.java"
    },
    {
      "className": "OmitParenthesesForLastArgumentLambda",
      "displayName": "Move a closure which is the last argument of a method invocation out of parentheses",
      "description": "Groovy allows a shorthand syntax that allows a closure to be placed outside of parentheses.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-groovy/src/main/java/org/openrewrite/groovy/format/OmitParenthesesForLastArgumentLambda.java"
    },
    {
      "className": "AutoFormat",
      "displayName": "Format Groovy code",
      "description": "Format Groovy code using a standard comprehensive set of Groovy formatting recipes.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-groovy/src/main/java/org/openrewrite/groovy/format/AutoFormat.java"
    },
    {
      "className": "OmitParenthesesFormat",
      "displayName": "Stylize Groovy code to omit parentheses",
      "description": "Omit parentheses for last argument lambdas in Groovy code.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-groovy/src/main/java/org/openrewrite/groovy/format/OmitParenthesesFormat.java"
    },
    {
      "className": "ReplaceLegacyAttributeIndexSyntax",
      "displayName": "Replace legacy attribute index syntax",
      "description": "Replace legacy attribute index syntax (`.0`) with the new syntax (`[0]`).",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/ReplaceLegacyAttributeIndexSyntax.java"
    },
    {
      "className": "MoveContentToFile",
      "displayName": "Move content to another file",
      "description": "Move content to another HCL file, deleting it in the original file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/MoveContentToFile.java"
    },
    {
      "className": "DeleteContent",
      "displayName": "Delete content",
      "description": "Delete HCL content by path.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/DeleteContent.java"
    },
    {
      "className": "FindAndReplaceLiteral",
      "displayName": "Find and replace literals in HCL files",
      "description": "Find and replace literal values in HCL files. This recipe parses the source files on which it runs as HCL, ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/search/FindAndReplaceLiteral.java"
    },
    {
      "className": "FindContent",
      "displayName": "Find content",
      "description": "Find HCL content by path.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/search/FindContent.java"
    },
    {
      "className": "RemoveTrailingWhitespace",
      "displayName": "Remove trailing whitespace",
      "description": "Remove any extra trailing whitespace from the end of each line.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/format/RemoveTrailingWhitespace.java"
    },
    {
      "className": "NormalizeFormat",
      "displayName": "Normalize format",
      "description": "Move whitespace to the outermost LST element possible.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/format/NormalizeFormat.java"
    },
    {
      "className": "TabsAndIndents",
      "displayName": "Tabs and indents",
      "description": "Format tabs and indents in HCL code.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/format/TabsAndIndents.java"
    },
    {
      "className": "BlankLines",
      "displayName": "Blank lines",
      "description": "Add and/or remove blank lines.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/format/BlankLines.java"
    },
    {
      "className": "AutoFormat",
      "displayName": "Format HCL code",
      "description": "Format HCL code using a standard comprehensive set of HCL formatting recipes.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/format/AutoFormat.java"
    },
    {
      "className": "Spaces",
      "displayName": "Spaces",
      "description": "Format whitespace in HCL code.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-hcl/src/main/java/org/openrewrite/hcl/format/Spaces.java"
    },
    {
      "className": "ScanningAccumulatedUpgradeRecipe",
      "displayName": "Accumulation-scanned recipe",
      "description": "Some recipes hava loop to determine all updates and add them to the scanner. This cycle/recipe only can update for the provided dependency.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/test/java/org/openrewrite/gradle/UpgradeTransitiveDependencyVersionTest.java"
    },
    {
      "className": "UpgradeDependencyInMarker",
      "displayName": "Upgrade a version within the GradleProject marker",
      "description": "Upgrade a version within the GradleProject marker. Makes no changes to the source file itself",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/test/java/org/openrewrite/gradle/marker/GradleProjectTest.java"
    },
    {
      "className": "RemoveRedundantDependencyVersions",
      "displayName": "Remove redundant explicit dependencies and versions",
      "description": "Remove explicitly-specified dependencies and dependency versions that are managed by a Gradle `platform`/`enforcedPlatform`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/RemoveRedundantDependencyVersions.java"
    },
    {
      "className": "UpgradeTransitiveDependencyVersion",
      "displayName": "Upgrade transitive Gradle dependencies",
      "description": "Upgrades the version of a transitive dependency in a Gradle build file. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/UpgradeTransitiveDependencyVersion.java"
    },
    {
      "className": "ChangeDependencyClassifier",
      "displayName": "Change a Gradle dependency classifier",
      "description": "Changes classifier of an existing dependency declared in `build.gradle` files.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/ChangeDependencyClassifier.java"
    },
    {
      "className": "AddPlatformDependency",
      "displayName": "Add Gradle platform dependency",
      "description": "Add a gradle platform dependency to a `build.gradle` file in the correct configuration based on where it is used.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/AddPlatformDependency.java"
    },
    {
      "className": "EnableDevelocityBuildCache",
      "displayName": "Enable Develocity build cache",
      "description": "Adds `buildCache` configuration to `develocity` where not yet present.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/EnableDevelocityBuildCache.java"
    },
    {
      "className": "RemoveEnableFeaturePreview",
      "displayName": "Remove an enabled Gradle preview feature",
      "description": "Remove an enabled Gradle preview feature from `settings.gradle`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/RemoveEnableFeaturePreview.java"
    },
    {
      "className": "DependencyUseMapNotation",
      "displayName": "Use `Map` notation for Gradle dependency declarations",
      "description": "In Gradle, dependencies can be expressed as a `String` like `\\",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/DependencyUseMapNotation.java"
    },
    {
      "className": "ChangeDependencyExtension",
      "displayName": "Change a Gradle dependency extension",
      "description": "Changes extension of an existing dependency declared in `build.gradle` files.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/ChangeDependencyExtension.java"
    },
    {
      "className": "ChangeDependencyConfiguration",
      "displayName": "Change a Gradle dependency configuration",
      "description": "A common example is the need to change `compile` to `api`/`implementation` as ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/ChangeDependencyConfiguration.java"
    },
    {
      "className": "ChangeManagedDependency",
      "displayName": "Change Gradle managed dependency",
      "description": "Change a Gradle managed dependency coordinates. The `newGroupId` or `newArtifactId` **MUST** be different from before.\\n",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/ChangeManagedDependency.java"
    },
    {
      "className": "ChangeExtraProperty",
      "displayName": "Change Extra Property",
      "description": "Gradle's [ExtraPropertiesExtension](https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html) ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/ChangeExtraProperty.java"
    },
    {
      "className": "ChangeDependencyArtifactId",
      "displayName": "Change Gradle dependency artifact",
      "description": "Change the artifact of a specified Gradle dependency.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/ChangeDependencyArtifactId.java"
    },
    {
      "className": "RemoveExtension",
      "displayName": "Remove build extension by name",
      "description": "Remove a Gradle build extension from `settings.gradle(.kts)` or `build.gradle(.kts)` files.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/RemoveExtension.java"
    },
    {
      "className": "UpgradeDependencyVersion",
      "displayName": "Upgrade Gradle dependency versions",
      "description": "",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/UpgradeDependencyVersion.java"
    },
    {
      "className": "ChangeDependencyGroupId",
      "displayName": "Change Gradle dependency group",
      "description": "Change the group of a specified Gradle dependency.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/ChangeDependencyGroupId.java"
    },
    {
      "className": "RemoveRepository",
      "displayName": "Remove repository",
      "description": "Removes a repository from Gradle build scripts. Named repositories include \\",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/RemoveRepository.java"
    },
    {
      "className": "AddDependency",
      "displayName": "Add Gradle dependency",
      "description": "Add a gradle dependency to a `build.gradle` file in the correct configuration based on where it is used.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/AddDependency.java"
    },
    {
      "className": "DependencyConstraintToRule",
      "displayName": "Dependency constraint to resolution rule",
      "description": "Gradle [dependency constraints](https://docs.gradle.org/current/userguide/dependency_constraints.html#dependency-constraints) ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/DependencyConstraintToRule.java"
    },
    {
      "className": "ChangeDependency",
      "displayName": "Change Gradle dependency",
      "description": "Change a Gradle dependency coordinates. The `newGroupId` or `newArtifactId` **MUST** be different from before.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/ChangeDependency.java"
    },
    {
      "className": "AddProperty",
      "displayName": "Add Gradle property",
      "description": "Add a property to the `gradle.properties` file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/AddProperty.java"
    },
    {
      "className": "UpdateGradleWrapper",
      "displayName": "Update Gradle wrapper",
      "description": "Update the version of Gradle used in an existing Gradle wrapper. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/UpdateGradleWrapper.java"
    },
    {
      "className": "RemoveDependency",
      "displayName": "Remove a Gradle dependency",
      "description": "Removes a single dependency from the dependencies section of the `build.gradle`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/RemoveDependency.java"
    },
    {
      "className": "UpdateJavaCompatibility",
      "displayName": "Update Gradle project Java compatibility",
      "description": "Find and updates the Java compatibility for the Gradle project.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/UpdateJavaCompatibility.java"
    },
    {
      "className": "DependencyUseStringNotation",
      "displayName": "Use `String` notation for Gradle dependency declarations",
      "description": "In Gradle, dependencies can be expressed as a `String` like `\\",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/DependencyUseStringNotation.java"
    },
    {
      "className": "JacocoReportDeprecations",
      "displayName": "Replace Gradle 8 introduced deprecations in JaCoCo report task",
      "description": "Set the `enabled` to `required` and the `destination` to `outputLocation` for Reports deprecations that were removed in gradle 8. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/gradle8/JacocoReportDeprecations.java"
    },
    {
      "className": "UseHttpsForRepositories",
      "displayName": "Use HTTPS for repositories",
      "description": "Use HTTPS for repository URLs.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/security/UseHttpsForRepositories.java"
    },
    {
      "className": "AddSettingsPlugin",
      "displayName": "Add Gradle settings plugin",
      "description": "Add plugin to Gradle settings file `plugins` block by id.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/AddSettingsPlugin.java"
    },
    {
      "className": "AddBuildPlugin",
      "displayName": "Add Gradle plugin",
      "description": "Add a build plugin to a Gradle build file's `plugins` block.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/AddBuildPlugin.java"
    },
    {
      "className": "RemoveDevelocityConfiguration",
      "displayName": "Remove Develocity configuration",
      "description": "Remove Develocity configuration from a Gradle build.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/RemoveDevelocityConfiguration.java"
    },
    {
      "className": "MigrateGradleEnterpriseToDevelocity",
      "displayName": "MigrateGradleEnterpriseToDevelocity",
      "description": "Migrate from the Gradle Enterprise Gradle plugin to the Develocity Gradle plugin.",
      "recipeType": "Migration",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/MigrateGradleEnterpriseToDevelocity.java"
    },
    {
      "className": "ChangePluginVersion",
      "displayName": "Change a Gradle plugin version by id",
      "description": "Change a Gradle plugin by id to a later version.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/ChangePluginVersion.java"
    },
    {
      "className": "RemoveSettingsPlugin",
      "displayName": "Remove Gradle settings plugin",
      "description": "Remove plugin from Gradle settings file `plugins` block by id.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/RemoveSettingsPlugin.java"
    },
    {
      "className": "UpgradePluginVersion",
      "displayName": "Update a Gradle plugin by id",
      "description": "Update a Gradle plugin by id to a later version defined by the plugins DSL. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/UpgradePluginVersion.java"
    },
    {
      "className": "AddDevelocityGradlePlugin",
      "displayName": "Add the Develocity Gradle plugin",
      "description": "Add the Develocity Gradle plugin to settings.gradle files.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/AddDevelocityGradlePlugin.java"
    },
    {
      "className": "RemoveBuildPlugin",
      "displayName": "Remove Gradle plugin",
      "description": "Remove plugin from Gradle `plugins` block by its id. Does not remove plugins from the `buildscript` block.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/RemoveBuildPlugin.java"
    },
    {
      "className": "ChangePlugin",
      "displayName": "Change a Gradle plugin",
      "description": "Changes the selected Gradle plugin to the new plugin.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/ChangePlugin.java"
    },
    {
      "className": "AddSettingsPluginRepository",
      "displayName": "Add a Gradle settings repository",
      "description": "Add a Gradle settings repository to `settings.gradle(.kts)`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/plugins/AddSettingsPluginRepository.java"
    },
    {
      "className": "ModuleHasDependency",
      "displayName": "Module has dependency",
      "description": "Searches for Gradle Projects (modules) that have a dependency matching the specified id or implementing class. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/search/ModuleHasDependency.java"
    },
    {
      "className": "FindDependency",
      "displayName": "Find Gradle dependency",
      "description": "Finds dependencies declared in gradle build files. See the [reference](https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_configurations_graph) on Gradle configurations or the diagram below for a description of what configuration to use. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/search/FindDependency.java"
    },
    {
      "className": "FindGradleProject",
      "displayName": "Find Gradle projects",
      "description": "Gradle projects are those with `build.gradle` or `build.gradle.kts` files.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/search/FindGradleProject.java"
    },
    {
      "className": "ModuleHasPlugin",
      "displayName": "Module has plugin",
      "description": "Searches for Gradle Projects (modules) that have a plugin matching the specified id or implementing class. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/search/ModuleHasPlugin.java"
    },
    {
      "className": "DependencyInsight",
      "displayName": "Gradle dependency insight",
      "description": "Find direct and transitive dependencies matching a group, artifact, resolved version, and optionally a configuration name. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/search/DependencyInsight.java"
    },
    {
      "className": "DoesNotIncludeDependency",
      "displayName": "Does not include Gradle dependency",
      "description": "A precondition which returns false if visiting a Gradle file which includes the specified dependency in the classpath of some scope. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/search/DoesNotIncludeDependency.java"
    },
    {
      "className": "FindRepository",
      "displayName": "Find Gradle repository",
      "description": "Find a Gradle repository by url.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/search/FindRepository.java"
    },
    {
      "className": "FindPlugins",
      "displayName": "Find Gradle plugin",
      "description": "Find a Gradle plugin by id and/or class name. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/search/FindPlugins.java"
    },
    {
      "className": "FindGradleWrapper",
      "displayName": "Find Gradle wrappers",
      "description": "Find Gradle wrappers.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/search/FindGradleWrapper.java"
    },
    {
      "className": "FindJVMTestSuites",
      "displayName": "Find Gradle JVMTestSuite plugin configuration",
      "description": "Find Gradle JVMTestSuite plugin configurations and produce a data table.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-gradle/src/main/java/org/openrewrite/gradle/search/FindJVMTestSuites.java"
    },
    {
      "className": "RenameTypeAlias",
      "displayName": "Rename type alias",
      "description": "Change the name of a given type alias.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-kotlin/src/main/java/org/openrewrite/kotlin/RenameTypeAlias.java"
    },
    {
      "className": "FindKotlinSources",
      "displayName": "Find Kotlin sources and collect data metrics",
      "description": "Use data table to collect source files types and counts of files with extensions `.kt`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-kotlin/src/main/java/org/openrewrite/kotlin/FindKotlinSources.java"
    },
    {
      "className": "ImplicitParameterInLambda",
      "displayName": "`it` shouldn't be used as a lambda parameter name",
      "description": "`it` is a special identifier that allows you to refer to the current parameter being passed to a ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-kotlin/src/main/java/org/openrewrite/kotlin/cleanup/ImplicitParameterInLambda.java"
    },
    {
      "className": "RemoveTrailingComma",
      "displayName": "Remove trailing comma in Kotlin",
      "description": "Remove trailing commas in variable, parameter, and class property lists.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-kotlin/src/main/java/org/openrewrite/kotlin/cleanup/RemoveTrailingComma.java"
    },
    {
      "className": "ReplaceCharToIntWithCode",
      "displayName": "Replace `Char#toInt()` with `Char#code`",
      "description": "Replace the usage of the deprecated `Char#toInt()` with `Char#code`. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-kotlin/src/main/java/org/openrewrite/kotlin/cleanup/ReplaceCharToIntWithCode.java"
    },
    {
      "className": "RemoveTrailingSemicolon",
      "displayName": "Remove unnecessary trailing semicolon",
      "description": "Some Java programmers may mistakenly add semicolons at the end when writing Kotlin code, but in ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-kotlin/src/main/java/org/openrewrite/kotlin/cleanup/RemoveTrailingSemicolon.java"
    },
    {
      "className": "UnnecessaryTypeParentheses",
      "displayName": "Remove unnecessary parentheses on Kotlin types",
      "description": "In Kotlin, it's possible to add redundant nested parentheses in type definitions. This recipe is designed to remove those unnecessary parentheses.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-kotlin/src/main/java/org/openrewrite/kotlin/cleanup/UnnecessaryTypeParentheses.java"
    },
    {
      "className": "RemoveLambdaArgumentParentheses",
      "displayName": "Remove method invocation parentheses around single lambda argument",
      "description": "For example, convert `1.let({ it + 1 })` to `1.let { it + 1 }`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-kotlin/src/main/java/org/openrewrite/kotlin/cleanup/RemoveLambdaArgumentParentheses.java"
    },
    {
      "className": "EqualsMethodUsage",
      "displayName": "Structural equality tests should use `==` or `!=`",
      "description": "In Kotlin, `==` means structural equality and `!=` structural inequality and both map to the left-side ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-kotlin/src/main/java/org/openrewrite/kotlin/cleanup/EqualsMethodUsage.java"
    },
    {
      "className": "AutoFormat",
      "displayName": "Format Kotlin code",
      "description": "Format Kotlin code using a standard comprehensive set of Kotlin formatting recipes.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-kotlin/src/main/java/org/openrewrite/kotlin/format/AutoFormat.java"
    },
    {
      "className": "TestRecipe",
      "displayName": "Test recipe",
      "description": "Test recipe.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-test/src/test/java/org/openrewrite/test/RecipePrinterTest.java"
    },
    {
      "className": "ScannerEdit",
      "displayName": "Attempts mutation during getScanner()",
      "description": "Any changes attempted by a visitor returned from getScanner() should be an error during test execution.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-test/src/test/java/org/openrewrite/test/internal/RewriteTestTest.java"
    },
    {
      "className": "RecipeNoParameters",
      "displayName": "Recipe with no parameters",
      "description": "A recipe with no parameters, used in EnvironmentTest",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-test/src/test/java/org/openrewrite/config/RecipeNoParameters.java"
    },
    {
      "className": "RecipeAcceptingParameters",
      "displayName": "Recipe accepting parameters",
      "description": "A recipe with parameters, used in EnvironmentTest",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-test/src/test/java/org/openrewrite/config/RecipeAcceptingParameters.java"
    },
    {
      "className": "AdHocRecipe",
      "displayName": "AdHocRecipe",
      "description": "An ad hoc recipe used in RewriteTest.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-test/src/main/java/org/openrewrite/test/AdHocRecipe.java"
    },
    {
      "className": "AdHocScanningRecipe",
      "displayName": "AdHocScanningRecipe",
      "description": "An ad hoc recipe used in RewriteTest.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-test/src/main/java/org/openrewrite/test/AdHocScanningRecipe.java"
    },
    {
      "className": "AddPropertyComment",
      "displayName": "Add comment before property key",
      "description": "Add a new comment before a property key if not already present, optionally commenting out the property.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-properties/src/main/java/org/openrewrite/properties/AddPropertyComment.java"
    },
    {
      "className": "ChangePropertyKey",
      "displayName": "Change property key",
      "description": "Change a property key leaving the value intact.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-properties/src/main/java/org/openrewrite/properties/ChangePropertyKey.java"
    },
    {
      "className": "CreatePropertiesFile",
      "displayName": "Create Properties file",
      "description": "Create a new Properties file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-properties/src/main/java/org/openrewrite/properties/CreatePropertiesFile.java"
    },
    {
      "className": "AddProperty",
      "displayName": "Add a new property",
      "description": "Adds a new property to a property file. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-properties/src/main/java/org/openrewrite/properties/AddProperty.java"
    },
    {
      "className": "ChangePropertyValue",
      "displayName": "Change property value",
      "description": "Change a property value leaving the key intact.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-properties/src/main/java/org/openrewrite/properties/ChangePropertyValue.java"
    },
    {
      "className": "DeleteProperty",
      "displayName": "Delete property by key",
      "description": "Deletes key/value pairs from properties files, as well as any comments that immediately precede the key/value pair. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-properties/src/main/java/org/openrewrite/properties/DeleteProperty.java"
    },
    {
      "className": "FindProperties",
      "displayName": "Find property",
      "description": "Finds occurrences of a property key.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-properties/src/main/java/org/openrewrite/properties/search/FindProperties.java"
    },
    {
      "className": "BoomRecipe",
      "displayName": "We go boom",
      "description": "Test recipe.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/RecipeSchedulerTest.java"
    },
    {
      "className": "RecipeBase",
      "displayName": "Recipe base",
      "description": "Recipe base.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/RecipeBasicsTest.java"
    },
    {
      "className": "FormalHello",
      "displayName": "Formal hello",
      "description": "Be formal. Be cool.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/RecipeListTest.java"
    },
    {
      "className": "DelegatingRecipe",
      "displayName": "Test delegate recipe",
      "description": "Test onComplete with delegate recipe.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/RecipeRunTest.java"
    },
    {
      "className": "CustomEstimatedEffortAppendToTextRecipe",
      "displayName": "CustomEstimatedEffortRecipe",
      "description": "NoArgRecipe.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/RecipeEstimatedEffortTest.java"
    },
    {
      "className": "ErrorDuringScanningPhase",
      "displayName": "Throw exception",
      "description": "Throws an exception in the scanning phase.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/RecipeLifecycleTest.java"
    },
    {
      "className": "JSpecifyAnnotatedRecipeOptions",
      "displayName": "Validate nullable JSpecify annotations",
      "description": "NullUtils should see these annotations.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/RecipeValidationTest.java"
    },
    {
      "className": "RecipeWithEstimatedEffortPerOccurrence",
      "displayName": "Recipe with estimatedEffortPerOccurrence",
      "description": "A fancy description.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/RecipeSerializerTest.java"
    },
    {
      "className": "RecipeWithBadStaticInitializer",
      "displayName": "RecipeWithBadStaticInitializer",
      "description": "",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/config/YamlResourceLoaderTest.java"
    },
    {
      "className": "MaxCycles",
      "displayName": "Executes recipes multiple times",
      "description": "Executes recipes multiple times.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/config/DeclarativeRecipeTest.java"
    },
    {
      "className": "RecipeWithApplicabilityTest",
      "displayName": "Recipe with an applicability test",
      "description": "This recipe is a test utility which exists to exercise RecipeRunStats.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/table/RecipeRunStatsTest.java"
    },
    {
      "className": "RecipeWithRecipeList",
      "displayName": "A recipe that has a recipe list",
      "description": "To verify that it is possible for a recipe list to be called over RPC.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/test/java/org/openrewrite/rpc/RewriteRpcTest.java"
    },
    {
      "className": "FindGitProvenance",
      "displayName": "Show Git source control metadata",
      "description": "List out the contents of each unique `GitProvenance` marker in the set of source files. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/FindGitProvenance.java"
    },
    {
      "className": "FindLstProvenance",
      "displayName": "Find LST provenance",
      "description": "Produces a data table showing what versions of OpenRewrite/Moderne tooling was used to produce a given LST.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/FindLstProvenance.java"
    },
    {
      "className": "DeleteSourceFiles",
      "displayName": "Delete files",
      "description": "Delete files by source path.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/DeleteSourceFiles.java"
    },
    {
      "className": "FindCollidingSourceFiles",
      "displayName": "Find colliding source files",
      "description": "Finds source files which share a path with another source file. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/FindCollidingSourceFiles.java"
    },
    {
      "className": "MoveFile",
      "displayName": "Move a file",
      "description": "Move a file to a different directory. The file name will remain the same.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/MoveFile.java"
    },
    {
      "className": "ExcludeFileFromGitignore",
      "displayName": "Remove ignoral of files or directories from .gitignore",
      "description": "This recipe will remove a file or directory from the .gitignore file. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/ExcludeFileFromGitignore.java"
    },
    {
      "className": "SetFilePermissions",
      "displayName": "Set file permission attributes",
      "description": "Set a file's read, write and executable permission attributes.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/SetFilePermissions.java"
    },
    {
      "className": "ListRuntimeClasspath",
      "displayName": "List runtime classpath",
      "description": "A diagnostic utility which emits the runtime classpath to a data table.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/ListRuntimeClasspath.java"
    },
    {
      "className": "Noop",
      "displayName": "Do nothing",
      "description": "Default no-op test, does nothing.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/Recipe.java"
    },
    {
      "className": "AddToGitignore",
      "displayName": "Add entries to `.gitignore`",
      "description": "Adds entries to the project's `.gitignore` file. If no `.gitignore` file exists, one will be created. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/AddToGitignore.java"
    },
    {
      "className": "FindParseFailures",
      "displayName": "Find source files with `ParseExceptionResult` markers",
      "description": "This recipe explores parse failures after an LST is produced for classifying the types of ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/FindParseFailures.java"
    },
    {
      "className": "RenameFile",
      "displayName": "Rename a file",
      "description": "Rename a file while keeping it in the same directory.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/RenameFile.java"
    },
    {
      "className": "IsInRepository",
      "displayName": "Is in repository",
      "description": "A search recipe which marks files that are in a repository with one of the supplied names. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/IsInRepository.java"
    },
    {
      "className": "FindDeserializationErrors",
      "displayName": "Find deserialization errors",
      "description": "Produces a data table collecting all deserialization errors of serialized LSTs.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/FindDeserializationErrors.java"
    },
    {
      "className": "FindSourceFiles",
      "displayName": "Find files",
      "description": "Find files by source path. Paths are always interpreted as relative to the repository root.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/FindSourceFiles.java"
    },
    {
      "className": "FindQuarks",
      "displayName": "Find instances of type `Quark`",
      "description": "`Quark` source files are pointers to the existence of a file without capturing any of the contents of the file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/FindQuarks.java"
    },
    {
      "className": "CompositeRecipe",
      "displayName": "CompositeRecipe",
      "description": "A recipe that consists of a list of other recipes.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/config/CompositeRecipe.java"
    },
    {
      "className": "DeclarativeRecipe",
      "displayName": "Precondition bellwether",
      "description": "Evaluates a precondition and makes that result available to the preconditions of other recipes. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/config/DeclarativeRecipe.java"
    },
    {
      "className": "FindCommitters",
      "displayName": "Find committers on repositories",
      "description": "List the committers on a repository.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/search/FindCommitters.java"
    },
    {
      "className": "FindBuildMetadata",
      "displayName": "Find build metadata",
      "description": "Find source files with matching build metadata.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/search/FindBuildMetadata.java"
    },
    {
      "className": "FindParseToPrintInequality",
      "displayName": "Find parse to print inequality",
      "description": "OpenRewrite `Parser` implementations should produce `SourceFile` objects whose `printAll()` ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/search/FindParseToPrintInequality.java"
    },
    {
      "className": "RepositoryContainsFile",
      "displayName": "Repository contains file",
      "description": "Intended to be used primarily as a precondition for other recipes, this recipe checks if a repository ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/search/RepositoryContainsFile.java"
    },
    {
      "className": "EndOfLineAtEndOfFile",
      "displayName": "End of Line @ End of File (EOL @ EOF)",
      "description": "Ensure that the file ends with the newline character.\\n\\n",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/text/EndOfLineAtEndOfFile.java"
    },
    {
      "className": "ChangeText",
      "displayName": "Change text",
      "description": "Completely replaces the contents of the text file with other text. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/text/ChangeText.java"
    },
    {
      "className": "CreateTextFile",
      "displayName": "Create text file",
      "description": "Creates a new plain text file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/text/CreateTextFile.java"
    },
    {
      "className": "AppendToTextFile",
      "displayName": "Append to text file",
      "description": "Appends or replaces content of an existing plain text file, or creates a new one if it doesn't already exist. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/text/AppendToTextFile.java"
    },
    {
      "className": "Find",
      "displayName": "Find text",
      "description": "Textual search, optionally using Regular Expression (regex) to query.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/text/Find.java"
    },
    {
      "className": "FindAndReplace",
      "displayName": "Find and replace",
      "description": "Textual find and replace, optionally interpreting the search query as a Regular Expression (regex). ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/text/FindAndReplace.java"
    },
    {
      "className": "FindMultiselect",
      "displayName": "Experimental find text with multiselect",
      "description": "Search for text, treating all textual sources as plain text. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/text/FindMultiselect.java"
    },
    {
      "className": "RpcRecipe",
      "displayName": "RpcRecipe",
      "description": "",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-core/src/main/java/org/openrewrite/rpc/RpcRecipe.java"
    },
    {
      "className": "RemoveTrailingWhitespace",
      "displayName": "Remove trailing whitespace",
      "description": "Remove any extra trailing whitespace from the end of each line.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/RemoveTrailingWhitespace.java"
    },
    {
      "className": "ChangeTagValue",
      "displayName": "Change XML tag value",
      "description": "Alters the value of XML tags matching the provided expression. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/ChangeTagValue.java"
    },
    {
      "className": "XsltTransformation",
      "displayName": "XSLT transformation",
      "description": "Apply the specified XSLT transformation on matching files. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/XsltTransformation.java"
    },
    {
      "className": "AddOrUpdateChildTag",
      "displayName": "Add or update child tag",
      "description": "Adds or updates a child element below the parent(s) matching the provided `parentXPath` expression. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/AddOrUpdateChildTag.java"
    },
    {
      "className": "ChangeNamespaceValue",
      "displayName": "Change XML attribute of a specific resource version",
      "description": "Alters XML Attribute value within specified element of a specific resource versions.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/ChangeNamespaceValue.java"
    },
    {
      "className": "RemoveEmptyXmlTags",
      "displayName": "Remove empty XML Tag",
      "description": "Removes XML tags that do not have attributes or children, including self closing tags.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/RemoveEmptyXmlTags.java"
    },
    {
      "className": "AddTagAttribute",
      "displayName": "Add new XML attribute for an Element",
      "description": "Add new XML attribute with value on a specified element.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/AddTagAttribute.java"
    },
    {
      "className": "ChangeTagAttribute",
      "displayName": "Change XML attribute",
      "description": "Alters XML attribute value on a specified element.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/ChangeTagAttribute.java"
    },
    {
      "className": "CreateXmlFile",
      "displayName": "Create XML file",
      "description": "Create a new XML file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/CreateXmlFile.java"
    },
    {
      "className": "RemoveXmlTag",
      "displayName": "Remove XML tag",
      "description": "Removes XML tags matching the provided expression.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/RemoveXmlTag.java"
    },
    {
      "className": "ChangeTagName",
      "displayName": "Change XML tag name",
      "description": "Alters the name of XML tags matching the provided expression.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/ChangeTagName.java"
    },
    {
      "className": "AddCommentToXmlTag",
      "displayName": "Add a comment to an XML tag",
      "description": "Adds a comment as the first element in an XML tag.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/AddCommentToXmlTag.java"
    },
    {
      "className": "AddOwaspDateBoundSuppressions",
      "displayName": "Add date bounds to OWASP suppressions",
      "description": "Adds an expiration date to all OWASP suppressions in order to ensure that they are periodically reviewed. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/security/AddOwaspDateBoundSuppressions.java"
    },
    {
      "className": "UpdateOwaspSuppressionDate",
      "displayName": "Update OWASP suppression date bounds",
      "description": "Updates the expiration date for OWASP suppressions having a matching cve tag. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/security/UpdateOwaspSuppressionDate.java"
    },
    {
      "className": "RemoveOwaspSuppressions",
      "displayName": "Remove out-of-date OWASP suppressions",
      "description": "Remove all OWASP suppressions with a suppression end date in the past, as these are no longer valid. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/security/RemoveOwaspSuppressions.java"
    },
    {
      "className": "IsOwaspSuppressionsFile",
      "displayName": "Find OWASP vulnerability suppression XML files",
      "description": "These files are used to suppress false positives in OWASP [Dependency Check](https://jeremylong.github.io/DependencyCheck).",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/security/IsOwaspSuppressionsFile.java"
    },
    {
      "className": "AutodetectDebug",
      "displayName": "XML style Auto-detection debug",
      "description": "Runs XML Autodetect and records the results in data tables and search markers. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/style/AutodetectDebug.java"
    },
    {
      "className": "FindNamespacePrefix",
      "displayName": "Find XML namespace prefixes",
      "description": "Find XML namespace prefixes, optionally restricting the search by a XPath expression.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/search/FindNamespacePrefix.java"
    },
    {
      "className": "HasNamespaceUri",
      "displayName": "Find XML namespace URIs",
      "description": "Find XML namespace URIs, optionally restricting the search by a XPath expression.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/search/HasNamespaceUri.java"
    },
    {
      "className": "DoesNotUseNamespaceUri",
      "displayName": "Find files without Namespace URI",
      "description": "Find XML root elements that do not have a specific Namespace URI, optionally restricting the search by an XPath expression.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/search/DoesNotUseNamespaceUri.java"
    },
    {
      "className": "FindTags",
      "displayName": "Find XML tags",
      "description": "Find XML tags by XPath expression.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/search/FindTags.java"
    },
    {
      "className": "NormalizeLineBreaks",
      "displayName": "Normalize line breaks",
      "description": "Consistently use either Windows style (CRLF) or Linux style (LF) line breaks. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/format/NormalizeLineBreaks.java"
    },
    {
      "className": "NormalizeFormat",
      "displayName": "Normalize format",
      "description": "Move whitespace to the outermost LST element possible.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/format/NormalizeFormat.java"
    },
    {
      "className": "LineBreaks",
      "displayName": "Blank lines",
      "description": "Add line breaks at appropriate places between XML syntax elements.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/format/LineBreaks.java"
    },
    {
      "className": "NormalizeTabsOrSpaces",
      "displayName": "Normalize to tabs or spaces",
      "description": "Consistently use either tabs or spaces in indentation.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/format/NormalizeTabsOrSpaces.java"
    },
    {
      "className": "TabsAndIndents",
      "displayName": "Tabs and indents",
      "description": "Format tabs and indents in XML code.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/format/TabsAndIndents.java"
    },
    {
      "className": "AutoFormat",
      "displayName": "Format XML",
      "description": "Indents XML using the most common indentation size and tabs or space choice in use in the file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-xml/src/main/java/org/openrewrite/xml/format/AutoFormat.java"
    },
    {
      "className": "RandomizeId",
      "displayName": "Randomize tree IDs",
      "description": "Scramble the IDs. This was intended as a utility to test _en masse_ ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/RandomizeId.java"
    },
    {
      "className": "RemoveMethodInvocations",
      "displayName": "Remove method invocations",
      "description": "Remove method invocations if syntactically safe.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/RemoveMethodInvocations.java"
    },
    {
      "className": "OrderImports",
      "displayName": "Order imports",
      "description": "Groups and orders import statements. If a [style has been defined](https://docs.openrewrite.org/concepts-and-explanations/styles), this recipe will order the imports ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/OrderImports.java"
    },
    {
      "className": "ChangeTypeInStringLiteral",
      "displayName": "Change type in String literals",
      "description": "Change a given type to another when used in a String literal.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangeTypeInStringLiteral.java"
    },
    {
      "className": "ChangeType",
      "displayName": "Change type",
      "description": "Change a given type to another.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangeType.java"
    },
    {
      "className": "AddMethodParameter",
      "displayName": "Add method parameter to a method declaration",
      "description": "Adds a new method parameter to an existing method declaration.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/AddMethodParameter.java"
    },
    {
      "className": "ReplaceMethodInvocationWithConstant",
      "displayName": "Replace method invocation with constant",
      "description": "Replace all method invocations matching the method pattern with the specified constant.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ReplaceMethodInvocationWithConstant.java"
    },
    {
      "className": "RemoveUnusedImports",
      "displayName": "Remove unused imports",
      "description": "Remove imports for types that are not referenced. As a precaution against incorrect changes no imports ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/RemoveUnusedImports.java"
    },
    {
      "className": "ChangeMethodAccessLevel",
      "displayName": "Change method access level",
      "description": "Change the access level (public, protected, private, package private) of a method.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangeMethodAccessLevel.java"
    },
    {
      "className": "InlineMethodCalls",
      "displayName": "Inline methods annotated with `@InlineMe`",
      "description": "Apply inlinings as defined by Error Prone's [`@InlineMe` annotation](https://errorprone.info/docs/inlineme), ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/InlineMethodCalls.java"
    },
    {
      "className": "AddLiteralMethodArgument",
      "displayName": "Add a literal method argument",
      "description": "Add a literal `String` or `int` argument to method invocations.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/AddLiteralMethodArgument.java"
    },
    {
      "className": "CreateEmptyJavaClass",
      "displayName": "Create Java class",
      "description": "Create a new, empty Java class.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/CreateEmptyJavaClass.java"
    },
    {
      "className": "ReplaceStringLiteralValue",
      "displayName": "Replace `String` literal",
      "description": "Replace the value of a complete `String` literal.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ReplaceStringLiteralValue.java"
    },
    {
      "className": "ChangeMethodTargetToVariable",
      "displayName": "Change method target to variable",
      "description": "Change method invocations to method calls on a variable.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangeMethodTargetToVariable.java"
    },
    {
      "className": "ReplaceConstantWithAnotherConstant",
      "displayName": "Replace constant with another constant",
      "description": "Replace a constant with another constant, adding/removing import on class if needed.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ReplaceConstantWithAnotherConstant.java"
    },
    {
      "className": "RemoveObjectsIsNull",
      "displayName": "Transform calls to `Objects.isNull(..)` and `Objects.nonNull(..)`",
      "description": "Replace calls to `Objects.isNull(..)` and `Objects.nonNull(..)` with a simple null check. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/RemoveObjectsIsNull.java"
    },
    {
      "className": "ReorderMethodArguments",
      "displayName": "Reorder method arguments",
      "description": "Reorder method arguments into the specified order.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ReorderMethodArguments.java"
    },
    {
      "className": "SimplifyMethodChain",
      "displayName": "Simplify a call chain",
      "description": "Simplify `a.b().c()` to `a.d()`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/SimplifyMethodChain.java"
    },
    {
      "className": "ChangeStaticFieldToMethod",
      "displayName": "Change static field access to static method access",
      "description": "Migrate accesses to a static field to invocations of a static method.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangeStaticFieldToMethod.java"
    },
    {
      "className": "AddCommentToMethodInvocations",
      "displayName": "Add comment to method invocations",
      "description": "Add a comment to method invocations in a Java source file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/AddCommentToMethodInvocations.java"
    },
    {
      "className": "AddCommentToImport",
      "displayName": "Add comment to import statement",
      "description": "Add a comment to an import statement in a Java source file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/AddCommentToImport.java"
    },
    {
      "className": "DeleteMethodArgument",
      "displayName": "Delete method argument",
      "description": "Delete an argument from method invocations.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/DeleteMethodArgument.java"
    },
    {
      "className": "RemoveImplements",
      "displayName": "Remove interface implementations",
      "description": "Removes `implements` clauses from classes implementing the specified interface. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/RemoveImplements.java"
    },
    {
      "className": "ShortenFullyQualifiedTypeReferences",
      "displayName": "Add imports for fully qualified references to types",
      "description": "Any fully qualified references to Java types will be replaced with corresponding simple ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ShortenFullyQualifiedTypeReferences.java"
    },
    {
      "className": "ReplaceConstant",
      "displayName": "Replace constant with literal value",
      "description": "Replace a named constant with a literal value when you wish to remove the old constant. A `String` literal must include escaped quotes.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ReplaceConstant.java"
    },
    {
      "className": "ChangeMethodInvocationReturnType",
      "displayName": "Change method invocation return type",
      "description": "Changes the return type of a method invocation.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangeMethodInvocationReturnType.java"
    },
    {
      "className": "ChangePackage",
      "displayName": "Rename package name",
      "description": "A recipe that will rename a package name in package statements, imports, and fully-qualified types.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangePackage.java"
    },
    {
      "className": "NoStaticImport",
      "displayName": "Remove static import",
      "description": "Removes static imports and replaces them with qualified references. For example, `emptyList()` becomes `Collections.emptyList()`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/NoStaticImport.java"
    },
    {
      "className": "ChangeAnnotationAttributeName",
      "displayName": "Change annotation attribute name",
      "description": "Some annotations accept arguments. This recipe renames an existing attribute.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangeAnnotationAttributeName.java"
    },
    {
      "className": "AddNullMethodArgument",
      "displayName": "Add a `null` method argument",
      "description": "Add a `null` argument to method invocations.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/AddNullMethodArgument.java"
    },
    {
      "className": "AddLicenseHeader",
      "displayName": "Add license header",
      "description": "Adds license headers to Java source files when missing. Does not override existing license headers.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/AddLicenseHeader.java"
    },
    {
      "className": "UseStaticImport",
      "displayName": "Use static import",
      "description": "Removes unnecessary receiver types from static method invocations. For example, `Collections.emptyList()` becomes `emptyList()`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/UseStaticImport.java"
    },
    {
      "className": "SimplifySingleElementAnnotation",
      "displayName": "Simplify single-element annotation",
      "description": "This recipe will remove the attribute `value` on single-element annotations. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/SimplifySingleElementAnnotation.java"
    },
    {
      "className": "RecipeMarkupDemonstration",
      "displayName": "Demonstrate rendering of `Markup` markers",
      "description": "Tooling may decide to elide or display differently markup of different levels.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/RecipeMarkupDemonstration.java"
    },
    {
      "className": "ReplaceStringLiteralWithConstant",
      "displayName": "Replace String literal with constant",
      "description": "Replace String literal with constant, adding import on class if needed.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ReplaceStringLiteralWithConstant.java"
    },
    {
      "className": "RemoveAnnotationAttribute",
      "displayName": "Remove annotation attribute",
      "description": "Some annotations accept arguments. This recipe removes an existing attribute.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/RemoveAnnotationAttribute.java"
    },
    {
      "className": "ChangeMethodName",
      "displayName": "Change method name",
      "description": "Rename a method.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangeMethodName.java"
    },
    {
      "className": "UpdateSourcePositions",
      "displayName": "Update source positions",
      "description": "Calculate start position and length for every LST element.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/UpdateSourcePositions.java"
    },
    {
      "className": "RemoveAnnotation",
      "displayName": "Remove annotation",
      "description": "Remove matching annotations wherever they occur.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/RemoveAnnotation.java"
    },
    {
      "className": "ChangePackageInStringLiteral",
      "displayName": "Rename package name in String literals",
      "description": "A recipe that will rename a package name in String literals.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangePackageInStringLiteral.java"
    },
    {
      "className": "ChangeMethodTargetToStatic",
      "displayName": "Change method target to static",
      "description": "Change method invocations to static method calls.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ChangeMethodTargetToStatic.java"
    },
    {
      "className": "AddCommentToMethod",
      "displayName": "Add comment to method declarations",
      "description": "Add a comment to method declarations in a Java source file.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/AddCommentToMethod.java"
    },
    {
      "className": "ReplaceAnnotation",
      "displayName": "Replace annotation",
      "description": "Replace an Annotation with another one if the annotation pattern matches. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ReplaceAnnotation.java"
    },
    {
      "className": "AddOrUpdateAnnotationAttribute",
      "displayName": "Add or update annotation attribute",
      "description": "Some annotations accept arguments. This recipe sets an existing argument to the specified value, ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/AddOrUpdateAnnotationAttribute.java"
    },
    {
      "className": "FindEmptyClasses",
      "displayName": "Find empty classes",
      "description": "Find empty classes without annotations that do not implement an interface or extend a class.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindEmptyClasses.java"
    },
    {
      "className": "FindClassHierarchy",
      "displayName": "Find class hierarchy",
      "description": "Discovers all class declarations within a project, recording which files they appear in, their superclasses, and interfaces. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindClassHierarchy.java"
    },
    {
      "className": "HasJavaVersion",
      "displayName": "Find files compiled at a specific Java version",
      "description": "Finds Java source files matching a particular language level. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/HasJavaVersion.java"
    },
    {
      "className": "FindDeprecatedMethods",
      "displayName": "Find uses of deprecated methods",
      "description": "Find uses of deprecated methods in any API.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindDeprecatedMethods.java"
    },
    {
      "className": "HasBuildToolVersion",
      "displayName": "Find files with a particular build tool version",
      "description": "Finds Java source files built with a particular build tool. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/HasBuildToolVersion.java"
    },
    {
      "className": "FindTypeMappings",
      "displayName": "Find type mappings",
      "description": "Study the frequency of `J` types and their `JavaType` type attribution.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindTypeMappings.java"
    },
    {
      "className": "ClasspathTypeCounts",
      "displayName": "Study the size of the classpath by source set",
      "description": "Emit one data table row per source set in a project, with the number of types in the source set.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/ClasspathTypeCounts.java"
    },
    {
      "className": "DoesNotUseType",
      "displayName": "Check whether a type is **not** in use",
      "description": "Useful as a precondition to skip over compilation units using the argument type.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/DoesNotUseType.java"
    },
    {
      "className": "FindImplementations",
      "displayName": "Find implementing classes",
      "description": "Find class declarations which implement the specified type. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindImplementations.java"
    },
    {
      "className": "FindComments",
      "displayName": "Find within comments and literals",
      "description": "Find regular expression matches within comments and literals. \\",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindComments.java"
    },
    {
      "className": "HasSourceSet",
      "displayName": "Find files in a source set",
      "description": "Source sets are a way to organize your source code into logical groups. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/HasSourceSet.java"
    },
    {
      "className": "IsLikelyNotTest",
      "displayName": "Find files that are likely not tests",
      "description": "Sources that do not contain indicators of being, or being exclusively for the use in tests. ",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/IsLikelyNotTest.java"
    },
    {
      "className": "FindTypes",
      "displayName": "Find types",
      "description": "Find type references by name.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindTypes.java"
    },
    {
      "className": "HasMinimumJavaVersion",
      "displayName": "Find the oldest Java version in use",
      "description": "The oldest Java version in use is the lowest Java ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/HasMinimumJavaVersion.java"
    },
    {
      "className": "FindLiterals",
      "displayName": "Find literals",
      "description": "Find literals matching a pattern.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindLiterals.java"
    },
    {
      "className": "FindImports",
      "displayName": "Find source files with imports",
      "description": "Locates source files that have imports matching the given type pattern, regardless of whether ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindImports.java"
    },
    {
      "className": "ResultOfMethodCallIgnored",
      "displayName": "Result of method call ignored",
      "description": "Find locations where the result of the method call is being ignored.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/ResultOfMethodCallIgnored.java"
    },
    {
      "className": "IsLikelyTest",
      "displayName": "Find sources that are likely tests",
      "description": "Sources that contain indicators of being, or being exclusively for the use in tests. ",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/IsLikelyTest.java"
    },
    {
      "className": "FindFieldsOfType",
      "displayName": "Find fields of type",
      "description": "Finds declared fields matching a particular class name.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindFieldsOfType.java"
    },
    {
      "className": "FindMethodDeclaration",
      "displayName": "Find method declaration",
      "description": "Locates the declaration of a method.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindMethodDeclaration.java"
    },
    {
      "className": "FindDeprecatedUses",
      "displayName": "Find uses of deprecated classes, methods, and fields",
      "description": "Find deprecated uses of methods, fields, and types. Optionally ignore those classes that are inside deprecated scopes.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindDeprecatedUses.java"
    },
    {
      "className": "FindAnnotations",
      "displayName": "Find annotations",
      "description": "Find all annotations matching the annotation pattern.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindAnnotations.java"
    },
    {
      "className": "FindDeprecatedClasses",
      "displayName": "Find uses of deprecated classes",
      "description": "Find uses of deprecated classes, optionally ignoring those classes that are inside deprecated scopes.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindDeprecatedClasses.java"
    },
    {
      "className": "FindDeprecatedFields",
      "displayName": "Find uses of deprecated fields",
      "description": "Find uses of deprecated fields in any API.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindDeprecatedFields.java"
    },
    {
      "className": "FindMethods",
      "displayName": "Find method usages",
      "description": "Find method calls by pattern.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindMethods.java"
    },
    {
      "className": "FindEmptyMethods",
      "displayName": "Find methods with empty bodies",
      "description": "Find methods with empty bodies and single public no arg constructors.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindEmptyMethods.java"
    },
    {
      "className": "FindMissingTypes",
      "displayName": "Find missing type information on Java LSTs",
      "description": "This is a diagnostic recipe to highlight where LSTs are missing type attribution information.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindMissingTypes.java"
    },
    {
      "className": "FindRepeatableAnnotations",
      "displayName": "Find uses of `@Repeatable` annotations",
      "description": "Java 8 introduced the concept of `@Repeatable` annotations.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindRepeatableAnnotations.java"
    },
    {
      "className": "FindCompileErrors",
      "displayName": "Find compile errors",
      "description": "Compile errors result in a particular LST structure that can be searched for.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindCompileErrors.java"
    },
    {
      "className": "FindFields",
      "displayName": "Find fields",
      "description": "Find uses of a field.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/search/FindFields.java"
    },
    {
      "className": "MethodDefinitionLength",
      "displayName": "Calculate token length of method definitions",
      "description": "Locates method definitions and predicts the number of token in each.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ai/MethodDefinitionLength.java"
    },
    {
      "className": "ClassDefinitionLength",
      "displayName": "Calculate token length of classes",
      "description": "Locates class definitions and predicts the number of token in each.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/ai/ClassDefinitionLength.java"
    },
    {
      "className": "RemoveTrailingWhitespace",
      "displayName": "Remove trailing whitespace",
      "description": "Remove any extra trailing whitespace from the end of each line.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/RemoveTrailingWhitespace.java"
    },
    {
      "className": "NormalizeLineBreaks",
      "displayName": "Normalize line breaks",
      "description": "Consistently use either Windows style (CRLF) or Linux style (LF) line breaks. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/NormalizeLineBreaks.java"
    },
    {
      "className": "NormalizeFormat",
      "displayName": "Normalize format",
      "description": "Move whitespace to the outermost LST element possible.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/NormalizeFormat.java"
    },
    {
      "className": "WrappingAndBraces",
      "displayName": "Wrapping and braces",
      "description": "Format line wraps and braces in Java code.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/WrappingAndBraces.java"
    },
    {
      "className": "TypecastParenPad",
      "displayName": "Typecast parentheses padding",
      "description": "Fixes whitespace padding between a typecast type identifier and the enclosing left and right parenthesis. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/TypecastParenPad.java"
    },
    {
      "className": "PadEmptyForLoopComponents",
      "displayName": "Pad empty `for` loop components",
      "description": "Fixes padding on empty `for` loop iterators and initializers to match Checkstyle policies.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/PadEmptyForLoopComponents.java"
    },
    {
      "className": "NormalizeTabsOrSpaces",
      "displayName": "Normalize to tabs or spaces",
      "description": "Consistently use either tabs or spaces in indentation.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/NormalizeTabsOrSpaces.java"
    },
    {
      "className": "TabsAndIndents",
      "displayName": "Tabs and indents",
      "description": "Format tabs and indents in Java code.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/TabsAndIndents.java"
    },
    {
      "className": "BlankLines",
      "displayName": "Blank lines",
      "description": "Add and/or remove blank lines.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/BlankLines.java"
    },
    {
      "className": "AutoFormat",
      "displayName": "Format Java code",
      "description": "Format Java code using a standard comprehensive set of Java formatting recipes.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/AutoFormat.java"
    },
    {
      "className": "SingleLineComments",
      "displayName": "Single line comments begin with a whitespace",
      "description": "Write `// hi` instead of `//hi`.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/SingleLineComments.java"
    },
    {
      "className": "MethodParamPad",
      "displayName": "Method parameter padding",
      "description": "Fixes whitespace padding between the identifier of a method definition or method invocation and the left parenthesis of the parameter list. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/MethodParamPad.java"
    },
    {
      "className": "NoWhitespaceBefore",
      "displayName": "No whitespace before",
      "description": "Removes unnecessary whitespace preceding a token. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/NoWhitespaceBefore.java"
    },
    {
      "className": "NoWhitespaceAfter",
      "displayName": "No whitespace after",
      "description": "Removes unnecessary whitespace appearing after a token. ",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/NoWhitespaceAfter.java"
    },
    {
      "className": "EmptyNewlineAtEndOfFile",
      "displayName": "End files with a single newline",
      "description": "Some tools work better when files end with an empty line.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/EmptyNewlineAtEndOfFile.java"
    },
    {
      "className": "Spaces",
      "displayName": "Spaces",
      "description": "Format whitespace in Java code.",
      "recipeType": "Java",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java/src/main/java/org/openrewrite/java/format/Spaces.java"
    },
    {
      "className": "VerifyCursorWellFormedRecipe",
      "displayName": "Verify cursor well-formed",
      "description": "This recipe verifies that the cursor is well-formed.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java-test/src/test/java/org/openrewrite/RepeatTest.java"
    },
    {
      "className": "MixedConstructorRecipe",
      "displayName": "Mixed constructor",
      "description": "A recipe with more than one constructor, with one marked as the primary.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java-test/src/test/java/org/openrewrite/java/MixedConstructorRecipe.java"
    },
    {
      "className": "ExtractTestInterface",
      "displayName": "Extract interface",
      "description": "Extract to an interface named `ITest`.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java-test/src/test/java/org/openrewrite/java/ExtractInterfaceTest.java"
    },
    {
      "className": "FinalizeLocalVariables",
      "displayName": "Finalize local variables",
      "description": "Adds the `final` modifier keyword to local variables which are not reassigned.",
      "recipeType": "Testing",
      "repository": "rewrite-core",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite/rewrite-java-test/src/test/java/org/openrewrite/java/FinalizeLocalVariablesTest.java"
    },
    {
      "className": "UpgradeExplicitSpringBootDependencies",
      "displayName": "Upgrade Spring dependencies",
      "description": "Upgrades dependencies according to the specified version of spring boot. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/maven/spring/UpgradeExplicitSpringBootDependencies.java"
    },
    {
      "className": "ChangeMethodParameter",
      "displayName": "Change parameter type for a method declaration",
      "description": "Change parameter type for a method declaration, identified by a method pattern.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/ChangeMethodParameter.java"
    },
    {
      "className": "AddSpringProperty",
      "displayName": "Add a spring configuration property",
      "description": "Add a spring configuration property to a configuration file if it does not already exist in that file.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/AddSpringProperty.java"
    },
    {
      "className": "CommentOutSpringPropertyKey",
      "displayName": "Comment out Spring properties",
      "description": "Add comment to specified Spring properties, and comment out the property.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/CommentOutSpringPropertyKey.java"
    },
    {
      "className": "ImplicitWebAnnotationNames",
      "displayName": "Remove implicit web annotation names",
      "description": "Removes implicit web annotation names.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/ImplicitWebAnnotationNames.java"
    },
    {
      "className": "PropertiesToKebabCaseProperties",
      "displayName": "Normalize Spring `application*.properties` properties to kebab-case",
      "description": "Normalize Spring `application*.properties` properties to kebab-case.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/PropertiesToKebabCaseProperties.java"
    },
    {
      "className": "SeparateApplicationYamlByProfile",
      "displayName": "Separate application YAML by profile",
      "description": "The Spring team's recommendation is to separate profile properties into their own YAML files now.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/SeparateApplicationYamlByProfile.java"
    },
    {
      "className": "UpdateApiManifest",
      "displayName": "Update the API manifest",
      "description": "Keep a consolidated manifest of the API endpoints that this application exposes up-to-date.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/UpdateApiManifest.java"
    },
    {
      "className": "NoAutowiredOnConstructor",
      "displayName": "Remove the `@Autowired` annotation on inferred constructor",
      "description": "Spring can infer an autowired constructor when there is a single constructor on the bean. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/NoAutowiredOnConstructor.java"
    },
    {
      "className": "PropertiesToKebabCaseYaml",
      "displayName": "Normalize Spring `application*.{yml,yaml}` properties to kebab-case",
      "description": "Normalize Spring `application*.{yml,yaml}` properties to kebab-case.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/PropertiesToKebabCaseYaml.java"
    },
    {
      "className": "ChangeSpringPropertyKey",
      "displayName": "Change the key of a Spring application property",
      "description": "Change Spring application property keys existing in either Properties or YAML files, and in `@Value` annotations.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/ChangeSpringPropertyKey.java"
    },
    {
      "className": "NoRepoAnnotationOnRepoInterface",
      "displayName": "Remove unnecessary `@Repository` annotation from Spring Data `Repository` sub-interface",
      "description": "Removes superfluous `@Repository` annotation from Spring Data `Repository` sub-interfaces.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/NoRepoAnnotationOnRepoInterface.java"
    },
    {
      "className": "RenameBean",
      "displayName": "Rename bean",
      "description": "Renames a Spring bean, both declaration and references.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/RenameBean.java"
    },
    {
      "className": "DeleteSpringProperty",
      "displayName": "Delete a spring configuration property",
      "description": "Delete a spring configuration property from any configuration file that contains a matching key.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/DeleteSpringProperty.java"
    },
    {
      "className": "NoRequestMappingAnnotation",
      "displayName": "Remove `@RequestMapping` annotations",
      "description": "Replace method declaration `@RequestMapping` annotations with `@GetMapping`, `@PostMapping`, etc. when possible.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/NoRequestMappingAnnotation.java"
    },
    {
      "className": "ExpandProperties",
      "displayName": "Expand Spring YAML properties",
      "description": "Expand YAML properties to not use the dot syntax shortcut.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/ExpandProperties.java"
    },
    {
      "className": "ChangeSpringPropertyValue",
      "displayName": "Change the value of a spring application property",
      "description": "Change spring application property values existing in either Properties or Yaml files.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/ChangeSpringPropertyValue.java"
    },
    {
      "className": "SpringRulesToJUnitExtension",
      "displayName": "Replace `SpringClassRule` and `SpringMethodRule` with JUnit 5 `SpringExtension`",
      "description": "Replace JUnit 4's `SpringClassRule` and `SpringMethodRule` with JUnit 5's `SpringExtension` or rely on an existing `@SpringBootTest`.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/test/SpringRulesToJUnitExtension.java"
    },
    {
      "className": "JdbcTemplateObjectArrayArgToVarArgs",
      "displayName": "Use varargs equivalents for deprecated JdbcTemplate signatures",
      "description": "`JdbcTemplate` signatures with `Object[]` arguments are deprecated, in favor of their existing varargs equivalents.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/JdbcTemplateObjectArrayArgToVarArgs.java"
    },
    {
      "className": "BeanMethodReturnNull",
      "displayName": "`@Bean` methods may not return `void`",
      "description": "Make `@Bean` methods return `Object` instead of `void`.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/BeanMethodReturnNull.java"
    },
    {
      "className": "BeanMethodsNotPublic",
      "displayName": "Remove `public` from `@Bean` methods",
      "description": "Remove public modifier from `@Bean` methods. They no longer have to be public visibility to be usable by Spring.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/BeanMethodsNotPublic.java"
    },
    {
      "className": "MigrateHandlerResultSetExceptionHandlerMethod",
      "displayName": "Migrate `org.springframework.web.reactive.HandlerResult.setExceptionHandler` method",
      "description": "`org.springframework.web.reactive.HandlerResult.setExceptionHandler(Function<Throwable, Mono<HandlerResult>>)` was deprecated, in favor of `setExceptionHandler(DispatchExceptionHandler)`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateHandlerResultSetExceptionHandlerMethod.java"
    },
    {
      "className": "MigrateWebMvcConfigurerAdapter",
      "displayName": "Replace `WebMvcConfigurerAdapter` with `WebMvcConfigurer`",
      "description": "As of 5.0 `WebMvcConfigurer` has default methods (made possible by a Java 8 baseline) and can be ",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateWebMvcConfigurerAdapter.java"
    },
    {
      "className": "MigrateUtf8MediaTypes",
      "displayName": "Migrate deprecated Spring Web UTF8 `MediaType` enums",
      "description": "Spring Web `MediaType#APPLICATION_JSON_UTF8` and `MediaType#APPLICATION_PROBLEM_JSON_UTF8` were deprecated in 5.2.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateUtf8MediaTypes.java"
    },
    {
      "className": "MigrateResponseEntityExceptionHandlerHttpStatusToHttpStatusCode",
      "displayName": "Migrate `ResponseEntityExceptionHandler` from HttpStatus to HttpStatusCode",
      "description": "With Spring 6 `HttpStatus` was replaced by `HttpStatusCode` in most method signatures in the `ResponseEntityExceptionHandler`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateResponseEntityExceptionHandlerHttpStatusToHttpStatusCode.java"
    },
    {
      "className": "MigrateResourceHttpMessageWriterAddHeadersMethod",
      "displayName": "Migrate `ResourceHttpMessageWriter.addHeaders`",
      "description": "`org.springframework.http.codec.ResourceHttpMessageWriter.addHeaders` was deprecated, in favor of `addDefaultHeaders` method.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateResourceHttpMessageWriterAddHeadersMethod.java"
    },
    {
      "className": "MigrateBase64Utils",
      "displayName": "Migrate `org.springframework.util.Base64Utils` to `java.io.Base64`",
      "description": "Replaces usages of deprecated `org.springframework.util.Base64Utils` with `java.util.Base64`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateBase64Utils.java"
    },
    {
      "className": "MigrateClientHttpResponseGetRawStatusCodeMethod",
      "displayName": "Replaces deprecated `ClientHttpResponse#getRawStatusCode()`",
      "description": "`ClientHttpResponse#getRawStatusCode()` was deprecated, so we replace it with `getStatusCode()`, ",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateClientHttpResponseGetRawStatusCodeMethod.java"
    },
    {
      "className": "MigrateWebExchangeBindExceptionResolveErrorMethod",
      "displayName": "Migrate `WebExchangeBindException.resolveErrorMessages`",
      "description": "`org.springframework.web.bind.support.WebExchangeBindException.resolveErrorMessages` was deprecated, in favor of `BindErrorUtils`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateWebExchangeBindExceptionResolveErrorMethod.java"
    },
    {
      "className": "MigrateHandlerInterceptor",
      "displayName": "Migrate `HandlerInterceptorAdapter` to `HandlerInterceptor`",
      "description": "Deprecated as of 5.3 in favor of implementing `HandlerInterceptor` and/or `AsyncHandlerInterceptor`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateHandlerInterceptor.java"
    },
    {
      "className": "MigrateMethodArgumentNotValidExceptionErrorMethod",
      "displayName": "Migrate `MethodArgumentNotValidException.errorsToStringList` and `resolveErrorMessages`",
      "description": "`org.springframework.web.bind.MethodArgumentNotValidException.errorsToStringList` and `resolveErrorMessages` method was deprecated, in favor of `BindErrorUtils`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateMethodArgumentNotValidExceptionErrorMethod.java"
    },
    {
      "className": "MigrateUriComponentsBuilderMethods",
      "displayName": "Migrate `UriComponentsBuilder.fromHttpRequest` and `parseForwardedFor`",
      "description": "The `fromHttpRequest` and `parseForwardedFor` methods in `org.springframework.web.util.UriComponentsBuilder` were deprecated, in favor of `org.springframework.web.util.ForwardedHeaderUtils`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateUriComponentsBuilderMethods.java"
    },
    {
      "className": "MigrateInstantiationAwareBeanPostProcessorAdapter",
      "displayName": "Convert `InstantiationAwareBeanPostProcessorAdapter` to `SmartInstantiationAwareBeanPostProcessor`",
      "description": "As of Spring-Framework 5.3 `InstantiationAwareBeanPostProcessorAdapter` is deprecated in favor of the existing default methods in `SmartInstantiationAwareBeanPostProcessor`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateInstantiationAwareBeanPostProcessorAdapter.java"
    },
    {
      "className": "MigrateResponseStatusExceptionGetRawStatusCodeMethod",
      "displayName": "Migrate `ResponseStatusException#getRawStatusCode()` to `getStatusCode().value()`",
      "description": "Migrate Spring Framework 5.3's `ResponseStatusException` method `getRawStatusCode()` to Spring Framework 6's `getStatusCode().value()`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateResponseStatusExceptionGetRawStatusCodeMethod.java"
    },
    {
      "className": "MigrateResponseStatusExceptionGetStatusCodeMethod",
      "displayName": "Migrate `ResponseStatusException#getStatus()` to `getStatusCode()`",
      "description": "Migrate Spring Framework 5.3's `ResponseStatusException` method `getStatus()` to Spring Framework 6's `getStatusCode()`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateResponseStatusExceptionGetStatusCodeMethod.java"
    },
    {
      "className": "HttpComponentsClientHttpRequestFactoryReadTimeout",
      "displayName": "Migrate `setReadTimeout(java.lang.int)` to SocketConfig `setSoTimeout(..)`",
      "description": "`setReadTimeout(..)` was removed in Spring Framework 6.1.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/HttpComponentsClientHttpRequestFactoryReadTimeout.java"
    },
    {
      "className": "MigrateHandlerResultHasExceptionHandlerMethod",
      "displayName": "Migrate `HandlerResult.hasExceptionHandler()` to `getExceptionHandler()`",
      "description": "`org.springframework.web.reactive.HandlerResult.hasExceptionHandler()` was deprecated, in favor of `getExceptionHandler()`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/MigrateHandlerResultHasExceptionHandlerMethod.java"
    },
    {
      "className": "EnvironmentAcceptsProfiles",
      "displayName": "Use `Environment#acceptsProfiles(Profiles)`",
      "description": "`Environment#acceptsProfiles(String...)` was deprecated in Spring Framework 5.1.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/framework/EnvironmentAcceptsProfiles.java"
    },
    {
      "className": "UseTlsAmqpConnectionString",
      "displayName": "Use TLS for AMQP connection strings",
      "description": "Use TLS for AMQP connection strings.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/amqp/UseTlsAmqpConnectionString.java"
    },
    {
      "className": "PropagateAuthenticationServiceExceptions",
      "displayName": "Remove calls matching `AuthenticationEntryPointFailureHandler.setRethrowAuthenticationServiceException(true)`",
      "description": "Remove any calls matching `AuthenticationEntryPointFailureHandler.setRethrowAuthenticationServiceException(true)`. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/PropagateAuthenticationServiceExceptions.java"
    },
    {
      "className": "RemoveOauth2LoginConfig",
      "displayName": "Remove unneeded `oauth2Login` config when upgrading to Spring Security 6",
      "description": "",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/RemoveOauth2LoginConfig.java"
    },
    {
      "className": "UpdateRequestCache",
      "displayName": "Keep the default RequestCache querying behavior in Spring Security 5",
      "description": "By default, Spring Security 5 queries the saved request on every request, which means that in a ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/UpdateRequestCache.java"
    },
    {
      "className": "ApplyToWithLambdaDsl",
      "displayName": "Convert `HttpSecurity::apply` chained calls into `HttpSecurity::with` Lambda DSL",
      "description": "Converts `HttpSecurity::apply` chained call from Spring Security pre 6.2.x into new lambda DSL style calls and removes `and()` methods.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/ApplyToWithLambdaDsl.java"
    },
    {
      "className": "RemoveFilterSecurityInterceptorOncePerRequest",
      "displayName": "Remove unnecessary `filterSecurityInterceptorOncePerRequest(false)` when upgrading to Spring Security 6",
      "description": "In Spring Security 6.0, `<http>` defaults `authorizeRequests#filterSecurityInterceptorOncePerRequest` to false. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/RemoveFilterSecurityInterceptorOncePerRequest.java"
    },
    {
      "className": "UpdateEnableReactiveMethodSecurity",
      "displayName": "Remove the `useAuthorizationManager=true` attribute from `@EnableReactiveMethodSecurity`",
      "description": "In Spring security 6.0, `@EnableReactiveMethodSecurity` defaults `useAuthorizationManager` to true. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/UpdateEnableReactiveMethodSecurity.java"
    },
    {
      "className": "RequireExplicitSavingOfSecurityContextRepository",
      "displayName": "Remove explicit `SecurityContextConfigurer.requireExplicitSave(true)` opt-in",
      "description": "Remove explicit `SecurityContextConfigurer.requireExplicitSave(true)` opt-in as that is the new default in Spring Security 6. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/RequireExplicitSavingOfSecurityContextRepository.java"
    },
    {
      "className": "UseSha256InRememberMe",
      "displayName": "Remove explicit configuration of SHA-256 as encoding and matching algorithm for `TokenBasedRememberMeServices`",
      "description": "As of Spring Security 6.0 the SHA-256 algorithm is the default for the encoding and matching algorithm used by `TokenBasedRememberMeServices` and does thus no longer need to be explicitly configured. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/UseSha256InRememberMe.java"
    },
    {
      "className": "OAuth2ResourceServerLambdaDsl",
      "displayName": "Convert `OAuth2ResourceServerConfigurer` chained calls into Lambda DSL",
      "description": "Converts `OAuth2ResourceServerConfigurer` chained call from Spring Security pre 5.2.x into new lambda DSL style calls and removes `and()` methods.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/oauth2/server/resource/OAuth2ResourceServerLambdaDsl.java"
    },
    {
      "className": "OAuth2ClientLambdaDsl",
      "displayName": "Convert `OAuth2ClientConfigurer` chained calls into Lambda DSL",
      "description": "Converts `OAuth2ClientConfigurer` chained call from Spring Security pre 5.2.x into new lambda DSL style calls and removes `and()` methods.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/oauth2/client/OAuth2ClientLambdaDsl.java"
    },
    {
      "className": "OAuth2LoginLambdaDsl",
      "displayName": "Convert `OAuth2LoginConfigurer` chained calls into Lambda DSL",
      "description": "Converts `OAuth2LoginConfigurer` chained call from Spring Security pre 5.2.x into new lambda DSL style calls and removes `and()` methods.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security6/oauth2/client/OAuth2LoginLambdaDsl.java"
    },
    {
      "className": "FindSpringComponents",
      "displayName": "Find Spring components",
      "description": "Find Spring components, including controllers, services, repositories, ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/search/FindSpringComponents.java"
    },
    {
      "className": "FindApiEndpoints",
      "displayName": "Find Spring API endpoints",
      "description": "",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/search/FindApiEndpoints.java"
    },
    {
      "className": "FindApiCalls",
      "displayName": "Find HTTP API calls via `RestTemplate`",
      "description": "",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/search/FindApiCalls.java"
    },
    {
      "className": "SimplifyMediaTypeParseCalls",
      "displayName": "Simplify unnecessary `MediaType.parseMediaType()` and `MediaType.valueOf()` calls",
      "description": "Replaces `MediaType.parseMediaType(\\",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/http/SimplifyMediaTypeParseCalls.java"
    },
    {
      "className": "ReplaceStringLiteralsWithHttpHeadersConstants",
      "displayName": "Replace String literals with `HttpHeaders` constants",
      "description": "Replace String literals with `org.springframework.http.HttpHeaders` constants.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/http/ReplaceStringLiteralsWithHttpHeadersConstants.java"
    },
    {
      "className": "ReplaceStringLiteralsWithMediaTypeConstants",
      "displayName": "Replace String literals with `MediaType` constants",
      "description": "Replace String literals with `org.springframework.http.MediaType` constants.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/http/ReplaceStringLiteralsWithMediaTypeConstants.java"
    },
    {
      "className": "SimplifyWebTestClientCalls",
      "displayName": "Simplify WebTestClient expressions",
      "description": "Simplifies various types of WebTestClient expressions to improve code readability.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/http/SimplifyWebTestClientCalls.java"
    },
    {
      "className": "KafkaTestUtilsDuration",
      "displayName": "Use `Duration` in `KafkaTestUtils`",
      "description": "Replace `KafkaTestUtils` methods that take a `long` argument with methods that take a `Duration`.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/kafka/KafkaTestUtilsDuration.java"
    },
    {
      "className": "RemoveUsingCompletableFuture",
      "displayName": "Remove `KafkaOperations.usingCompletableFuture()`",
      "description": "Remove the `KafkaOperations.usingCompletableFuture()` bridge during Spring Kafka 2.9 to 3.0 migration.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/kafka/RemoveUsingCompletableFuture.java"
    },
    {
      "className": "KafkaOperationsSendReturnType",
      "displayName": "Change `KafkaOperations.send*` return type to `CompletableFuture`",
      "description": "Send operations used to return a `ListenableFuture` but as of 3.0 return a `CompletableFuture`. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/kafka/KafkaOperationsSendReturnType.java"
    },
    {
      "className": "ReplaceSupportClassWithItsInterface",
      "displayName": "Transform classes that extend a given Class to implement the given Interface instead",
      "description": "As of spring-batch 5.x Listeners has default methods (made possible by a Java 8 baseline) and can be ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/batch/ReplaceSupportClassWithItsInterface.java"
    },
    {
      "className": "MigrateItemWriterWrite",
      "displayName": "Migrate `ItemWriter`",
      "description": "`JobBuilderFactory` was deprecated in spring-batch 5.x: replaced by `JobBuilder`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/batch/MigrateItemWriterWrite.java"
    },
    {
      "className": "MigrateJobBuilderFactory",
      "displayName": "Migrate `JobBuilderFactory` to `JobBuilder`",
      "description": "`JobBuilderFactory` was deprecated in spring-batch 5.x. It is replaced by `JobBuilder`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/batch/MigrateJobBuilderFactory.java"
    },
    {
      "className": "MigrateStepBuilderFactory",
      "displayName": "Migrate `StepBuilderFactory` to `StepBuilder`",
      "description": "`StepBuilderFactory` was deprecated in spring-batch 5.x. It is replaced by `StepBuilder`.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/batch/MigrateStepBuilderFactory.java"
    },
    {
      "className": "RemoveDefaultBatchConfigurer",
      "displayName": "Remove `DefaultBatchConfigurer`",
      "description": "Remove `extends DefaultBatchConfigurer` and `@Override` from associated methods.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/batch/RemoveDefaultBatchConfigurer.java"
    },
    {
      "className": "JobParameterToString",
      "displayName": "Migration invocation of JobParameter.toString to JobParameter.getValue.toString",
      "description": "JobParameter.toString() logic is quite different in spring batch 5, need take JobParameter.getValue.toString replace the JobParameter.toString.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/batch/JobParameterToString.java"
    },
    {
      "className": "MigrateJobParameter",
      "displayName": "Add class argument to `JobParameters`",
      "description": "Migration Job Parameter, parameterized type is essential in Spring Batch 5.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/batch/MigrateJobParameter.java"
    },
    {
      "className": "MigrateMethodAnnotatedByBatchAPI",
      "displayName": "Migrate method when it annotated by Spring Batch API",
      "description": "Migrate method when it annotated by Spring Batch API.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/batch/MigrateMethodAnnotatedByBatchAPI.java"
    },
    {
      "className": "ConvertReceiveTypeWhenCallStepExecutionMethod",
      "displayName": "Convert receive type in some invocation of StepExecution.xx()",
      "description": "Convert receive type in some invocation of StepExecution.xx().",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/batch/ConvertReceiveTypeWhenCallStepExecutionMethod.java"
    },
    {
      "className": "HttpSecurityLambdaDsl",
      "displayName": "Convert `HttpSecurity` chained calls into Lambda DSL",
      "description": "Converts `HttpSecurity` chained call from Spring Security pre 5.2.x into new lambda DSL style calls and removes `and()` methods.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/HttpSecurityLambdaDsl.java"
    },
    {
      "className": "ConditionalOnBeanAnyNestedCondition",
      "displayName": "Migrate multi-condition `@ConditionalOnBean` annotations",
      "description": "Migrate multi-condition `@ConditionalOnBean` annotations to `AnyNestedCondition`.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/ConditionalOnBeanAnyNestedCondition.java"
    },
    {
      "className": "MigrateRestTemplateBuilderTimeoutByInt",
      "displayName": "Use `RestTemplateBuilder#setConnectTimeout(Duration)` and `RestTemplateBuilder#setReadTimeout(Duration)`",
      "description": "`RestTemplateBuilder#setConnectTimeout(int)` and `RestTemplateBuilder#setReadTimeout(int)` were deprecated in Spring Boot 2.1.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateRestTemplateBuilderTimeoutByInt.java"
    },
    {
      "className": "MigrateActuatorMediaTypeToApiVersion",
      "displayName": "Migrate deprecated `ActuatorMediaType` to `ApiVersion#getProducedMimeType`",
      "description": "Spring Boot `ActuatorMediaType` was deprecated in 2.5 in favor of `ApiVersion#getProducedMimeType()`. ",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateActuatorMediaTypeToApiVersion.java"
    },
    {
      "className": "MigrateConfigurationPropertiesBindingPostProcessorValidatorBeanName",
      "displayName": "Use `EnableConfigurationProperties.VALIDATOR_BEAN_NAME`",
      "description": "Replaces field and static access of `ConfigurationPropertiesBindingPostProcessor.VALIDATOR_BEAN_NAME` with `EnableConfigurationProperties.VALIDATOR_BEAN_NAME`. Deprecated in 2.2.x.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateConfigurationPropertiesBindingPostProcessorValidatorBeanName.java"
    },
    {
      "className": "ServerHttpSecurityLambdaDsl",
      "displayName": "Convert `ServerHttpSecurity` chained calls into Lambda DSL",
      "description": "Converts `ServerHttpSecurity` chained call from Spring Security pre 5.2.x into new lambda DSL style calls and removes `and()` methods.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/ServerHttpSecurityLambdaDsl.java"
    },
    {
      "className": "MigrateHsqlEmbeddedDatabaseConnection",
      "displayName": "Migrate deprecated Spring-Boot `EmbeddedDatabaseConnection.HSQL`",
      "description": "Spring-Boot `EmbeddedDatabaseConnection.HSQL` was deprecated in favor of `EmbeddedDatabaseConnection.HSQLDB` in 2.4.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateHsqlEmbeddedDatabaseConnection.java"
    },
    {
      "className": "RestTemplateBuilderRequestFactory",
      "displayName": "Migrate `RestTemplateBuilder`",
      "description": "Migrate `RestTemplateBuilder#requestFactory` calls to use a `Supplier`. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/RestTemplateBuilderRequestFactory.java"
    },
    {
      "className": "GetErrorAttributes",
      "displayName": "Use `ErrorAttributes#getErrorAttributes(WebRequest, ErrorAttributeOptions)`",
      "description": "`ErrorAttributes#getErrorAttributes(WebRequest, boolean)` was deprecated in Spring Boot 2.3.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/GetErrorAttributes.java"
    },
    {
      "className": "ReplaceDeprecatedEnvironmentTestUtils",
      "displayName": "Replace `EnvironmentTestUtils` with `TestPropertyValues`",
      "description": "Replaces any references to the deprecated `EnvironmentTestUtils` ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/ReplaceDeprecatedEnvironmentTestUtils.java"
    },
    {
      "className": "DatabaseComponentAndBeanInitializationOrderingUnconditionally",
      "displayName": "Unconditionally adds `@DependsOnDatabaseInitialization` to Spring Beans and Components depending on `javax.sql.DataSource`",
      "description": "Beans of certain well-known types, such as `JdbcTemplate`, will be ordered so that they are initialized ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/DatabaseComponentAndBeanInitializationOrderingUnconditionally.java"
    },
    {
      "className": "MigrateDatabaseCredentialsForToolProperties",
      "displayName": "Migrate ",
      "description": "Migrate ",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateDatabaseCredentialsForToolProperties.java"
    },
    {
      "className": "ChangeEmbeddedServletContainerCustomizer",
      "displayName": "Adjust configuration classes to use the `WebServerFactoryCustomizer` interface",
      "description": "Find any classes implementing `EmbeddedServletContainerCustomizer` and change the interface to ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/ChangeEmbeddedServletContainerCustomizer.java"
    },
    {
      "className": "ReplaceExtendWithAndContextConfiguration",
      "displayName": "Replace `@ExtendWith` and `@ContextConfiguration` with `@SpringJunitConfig`",
      "description": "Replaces `@ExtendWith(SpringRunner.class)` and `@ContextConfiguration` with `@SpringJunitConfig`, ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/ReplaceExtendWithAndContextConfiguration.java"
    },
    {
      "className": "MigrateDatabaseCredentialsForToolYaml",
      "displayName": "Migrate ",
      "description": "Migrate ",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateDatabaseCredentialsForToolYaml.java"
    },
    {
      "className": "MigrateErrorPropertiesIncludeStackTraceConstants",
      "displayName": "Use `ErrorProperties#IncludeStacktrace.ON_PARAM`",
      "description": "`ErrorProperties#IncludeStacktrace.ON_TRACE_PARAM` was deprecated in 2.3.x and removed in 2.5.0.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateErrorPropertiesIncludeStackTraceConstants.java"
    },
    {
      "className": "MoveAutoConfigurationToImportsFile",
      "displayName": "Use `AutoConfiguration#imports`",
      "description": "Use `AutoConfiguration#imports` instead of the deprecated entry ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MoveAutoConfigurationToImportsFile.java"
    },
    {
      "className": "MergeBootstrapYamlWithApplicationYaml",
      "displayName": "Merge Spring `bootstrap.yml` with `application.yml`",
      "description": "In Spring Boot 2.4, support for `bootstrap.yml` was removed. It's properties should be merged with `application.yml`.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MergeBootstrapYamlWithApplicationYaml.java"
    },
    {
      "className": "HeadersConfigurerLambdaDsl",
      "displayName": "Convert `HeadersConfigurer` chained calls into Lambda DSL",
      "description": "Converts `HeadersConfigurer` chained call from Spring Security pre 5.2.x into new lambda DSL style calls and removes `and()` methods.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/HeadersConfigurerLambdaDsl.java"
    },
    {
      "className": "MigrateLocalServerPortAnnotation",
      "displayName": "Use `org.springframework.boot.web.server.LocalServerPort`",
      "description": "Updates the package and adds the necessary dependency if `LocalServerPort` is in use. The package of `LocalServerPort` was changed in Spring Boot 2.0, necessitating changes.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateLocalServerPortAnnotation.java"
    },
    {
      "className": "MigrateMultipartConfigFactory",
      "displayName": "Use `MultipartConfigFactory` with `DataSize` arguments",
      "description": "Methods to set `DataSize` with primitive arguments were deprecated in 2.1 and removed in 2.2.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateMultipartConfigFactory.java"
    },
    {
      "className": "OutputCaptureExtension",
      "displayName": "Migrate `@OutputCaptureRule` to `@ExtendWith(OutputCaptureExtension.class)`",
      "description": "Use the JUnit Jupiter extension instead of JUnit 4 rule.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/OutputCaptureExtension.java"
    },
    {
      "className": "SpringBootMavenPluginMigrateAgentToAgents",
      "displayName": "Use `spring-boot.run.agents` configuration key in `spring-boot-maven-plugin`",
      "description": "Migrate the `spring-boot.run.agent` Maven plugin configuration key to `spring-boot.run.agents`. Deprecated in 2.2.x.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/SpringBootMavenPluginMigrateAgentToAgents.java"
    },
    {
      "className": "MigrateLoggingSystemPropertyConstants",
      "displayName": "Migrate to recommended constants in `LogbackLoggingSystemProperties` from deprecated values in `LoggingSystemProperties`",
      "description": "Replaces field and static access of deprecated fields in `LoggingSystemProperties` with the recommendations from `LogbackLoggingSystemProperties`. Deprecated in 2.4.x and removed in 2.6.0.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateLoggingSystemPropertyConstants.java"
    },
    {
      "className": "SamlRelyingPartyPropertyApplicationPropertiesMove",
      "displayName": "Move SAML relying party identity provider property to asserting party",
      "description": "Renames spring.security.saml2.relyingparty.registration.(any).identityprovider to ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/SamlRelyingPartyPropertyApplicationPropertiesMove.java"
    },
    {
      "className": "UnnecessarySpringExtension",
      "displayName": "Remove `@SpringExtension`",
      "description": "`@SpringBootTest` and all test slice annotations already applies `@SpringExtension` as of Spring Boot 2.1.0.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/UnnecessarySpringExtension.java"
    },
    {
      "className": "AddConfigurationAnnotationIfBeansPresent",
      "displayName": "Add missing `@Configuration` annotation",
      "description": "Class having `@Bean` annotation over any methods but missing `@Configuration` annotation over the declaring class would have `@Configuration` annotation added.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/AddConfigurationAnnotationIfBeansPresent.java"
    },
    {
      "className": "MigrateDiskSpaceHealthIndicatorConstructor",
      "displayName": "Use `DiskSpaceHealthIndicator(File, DataSize)`",
      "description": "`DiskSpaceHealthIndicator(File, long)` was deprecated in Spring Data 2.1 for removal in 2.2.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/MigrateDiskSpaceHealthIndicatorConstructor.java"
    },
    {
      "className": "CustomizingJooqDefaultConfiguration",
      "displayName": "In Spring Boot 2.5 a `DefaultConfigurationCustomizer` can now be used in favour of defining one or more `*Provider` beans",
      "description": "To streamline the customization of jOOQ’s `DefaultConfiguration`, ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/search/CustomizingJooqDefaultConfiguration.java"
    },
    {
      "className": "IntegrationSchedulerPoolRecipe",
      "displayName": "Integration scheduler pool size",
      "description": "Spring Integration now reuses an available `TaskScheduler` rather than configuring its own. In a ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/search/IntegrationSchedulerPoolRecipe.java"
    },
    {
      "className": "LoggingShutdownHooks",
      "displayName": "Applications using logging shutdown hooks",
      "description": "Spring Boot registers a logging shutdown hook by default for JAR-based applications to ensure that ",
      "recipeType": "Logging",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot2/search/LoggingShutdownHooks.java"
    },
    {
      "className": "DowngradeServletApiWhenUsingJetty",
      "displayName": "Downgrade Jakarta Servlet API to 5.0 when using Jetty",
      "description": "Jetty does not yet support Servlet 6.0. This recipe will detect the presence of the `spring-boot-starter-jetty` as a ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/DowngradeServletApiWhenUsingJetty.java"
    },
    {
      "className": "ConfigurationOverEnableSecurity",
      "displayName": "Add `@Configuration` to classes with `@EnableXXXSecurity` annotations",
      "description": "Prior to Spring Security 6, `@EnableXXXSecurity` implicitly had `@Configuration`. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/ConfigurationOverEnableSecurity.java"
    },
    {
      "className": "RemoveEnableBatchProcessing",
      "displayName": "Enable Spring Batch Annotation",
      "description": "Add or remove the `@EnableBatchProcessing` annotation from a Spring Boot application.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/RemoveEnableBatchProcessing.java"
    },
    {
      "className": "PreciseBeanType",
      "displayName": "Bean methods should return concrete types",
      "description": "Replace Bean method return types with concrete types being returned. This is required for Spring 6 AOT.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/PreciseBeanType.java"
    },
    {
      "className": "AddRouteTrailingSlash",
      "displayName": "Add trailing slash to Spring routes",
      "description": "This is part of Spring MVC and WebFlux URL Matching Changes, as of Spring Framework 6.0, the trailing ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/AddRouteTrailingSlash.java"
    },
    {
      "className": "RemoveConstructorBindingAnnotation",
      "displayName": "Remove Unnecessary `@ConstructorBinding`",
      "description": "As of Boot 3.0 `@ConstructorBinding` is no longer needed at the type level on `@ConfigurationProperties` classes and should be removed.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/RemoveConstructorBindingAnnotation.java"
    },
    {
      "className": "MigrateWebMvcTagsToObservationConvention",
      "displayName": "Migrate `WebMvcTagsProvider` to `DefaultServerRequestObservationConvention`",
      "description": "Migrate `WebMvcTagsProvider` to `DefaultServerRequestObservationConvention` as part of Spring Boot 3.2 removals.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/MigrateWebMvcTagsToObservationConvention.java"
    },
    {
      "className": "ReplaceRestTemplateBuilderRequestFactoryMethod",
      "displayName": "Replace `RestTemplateBuilder.requestFactory(Function)` with `requestFactoryBuilder`",
      "description": "`RestTemplateBuilder.requestFactory(java.util.function.Function)` was deprecated since Spring Boot 3.4, in favor of `requestFactoryBuilder(ClientHttpRequestFactoryBuilder)`.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/ReplaceRestTemplateBuilderRequestFactoryMethod.java"
    },
    {
      "className": "AddValidToNestedConfigProperties",
      "displayName": "Add `@Valid` to nested properties in `@ConfigurationProperties`",
      "description": "Adds `@Valid` annotation to fields in `@ConfigurationProperties` classes that contain nested properties with validation constraints.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/AddValidToNestedConfigProperties.java"
    },
    {
      "className": "AddSetUseTrailingSlashMatch",
      "displayName": "Add `SetUseTrailingSlashMatch()` in configuration",
      "description": "This is part of Spring MVC and WebFlux URL Matching Changes, as of Spring Framework 6.0, the trailing ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/AddSetUseTrailingSlashMatch.java"
    },
    {
      "className": "RemoveSolrAutoConfigurationExclude",
      "displayName": "Remove `SolrAutoConfiguration`",
      "description": "`SolrAutoConfiguration` was removed in Spring Boot 3; remove references to it from exclusions on annotations.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/RemoveSolrAutoConfigurationExclude.java"
    },
    {
      "className": "MaintainTrailingSlashURLMappings",
      "displayName": "Maintain trailing slash URL mappings",
      "description": "This is part of Spring MVC and WebFlux URL Matching Changes, as of Spring Framework 6.0, the trailing ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/boot3/MaintainTrailingSlashURLMappings.java"
    },
    {
      "className": "MigrateDocketBeanToGroupedOpenApiBean",
      "displayName": "Migrate `Docket` to `GroupedOpenAPI`",
      "description": "Migrate a `Docket` bean to a `GroupedOpenAPI` bean preserving group name, packages and paths. ",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/doc/MigrateDocketBeanToGroupedOpenApiBean.java"
    },
    {
      "className": "RemoveBeanValidatorPluginsConfiguration",
      "displayName": "Removes @Import(BeanValidatorPluginsConfiguration.class)",
      "description": "As Springdoc OpenAPI supports Bean Validation out of the box, the BeanValidatorPluginsConfiguration is no longer supported nor needed. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/doc/RemoveBeanValidatorPluginsConfiguration.java"
    },
    {
      "className": "RefactorSimpleMongoDbFactory",
      "displayName": "Use `new SimpleMongoClientDbFactory(String)`",
      "description": "Replace usage of deprecated `new SimpleMongoDbFactory(new MongoClientURI(String))` with `new SimpleMongoClientDbFactory(String)`.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/data/RefactorSimpleMongoDbFactory.java"
    },
    {
      "className": "MigrateQueryToNativeQuery",
      "displayName": "MigrateQueryToNativeQuery",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/data/MigrateQueryToNativeQuery.java"
    },
    {
      "className": "JdbcTemplateQueryForLongMigration",
      "displayName": "Convert `JdbcTemplate.queryForLong(..)` to `queryForObject(..)`",
      "description": "Replaces calls to `JdbcTemplate.queryForLong(..)` with `queryForObject(String, Class, Object...)`.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/data/JdbcTemplateQueryForLongMigration.java"
    },
    {
      "className": "MigrateQuerydslJpaRepository",
      "displayName": "Use `QuerydslPredicateExecutor<T>`",
      "description": "`QuerydslJpaRepository<T, ID extends Serializable>` was deprecated in Spring Data 2.1.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/data/MigrateQuerydslJpaRepository.java"
    },
    {
      "className": "UseTlsJdbcConnectionString",
      "displayName": "Use TLS for JDBC connection strings",
      "description": "Increasingly, for compliance reasons (e.g. [NACHA](https://www.nacha.org/sites/default/files/2022-06/End_User_Briefing_Supplementing_Data_Security_UPDATED_FINAL.pdf)), JDBC connection strings ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/data/UseTlsJdbcConnectionString.java"
    },
    {
      "className": "MigrateAuditorAwareToOptional",
      "displayName": "Make AuditorAware.getCurrentAuditor return `Optional`",
      "description": "As of Spring boot 2.0, the `AuditorAware.getCurrentAuditor` method should return an `Optional`. ",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/data/MigrateAuditorAwareToOptional.java"
    },
    {
      "className": "MigrateJpaSort",
      "displayName": "Use `JpaSort.of(..)`",
      "description": "Equivalent constructors in `JpaSort` were deprecated in Spring Data 2.3.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/data/MigrateJpaSort.java"
    },
    {
      "className": "MigrateRequestMappingOnFeignClient",
      "displayName": "Migrate `@RequestMapping` on `FeignClient` to `@FeignClient` path attribute",
      "description": "Support for `@RequestMapping` over a `FeignClient` interface was removed in Spring Cloud OpenFeign 2.2.10.RELEASE.",
      "recipeType": "Migration",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/cloud2022/MigrateRequestMappingOnFeignClient.java"
    },
    {
      "className": "AddLoggingPatternLevelForSleuth",
      "displayName": "Add logging.pattern.level for traceId and spanId",
      "description": "Add `logging.pattern.level` for traceId and spanId which was previously set by default, if not already set.",
      "recipeType": "Logging",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/cloud2022/AddLoggingPatternLevelForSleuth.java"
    },
    {
      "className": "ReplaceGlobalMethodSecurityWithMethodSecurity",
      "displayName": "Replace global method security with method security",
      "description": "`@EnableGlobalMethodSecurity` and `<global-method-security>` are deprecated in favor of ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security5/ReplaceGlobalMethodSecurityWithMethodSecurity.java"
    },
    {
      "className": "UpdateSCryptPasswordEncoder",
      "displayName": "Use new `SCryptPasswordEncoder` factory methods",
      "description": "In Spring Security 5.8 some `SCryptPasswordEncoder` constructors have been deprecated in favor of factory methods. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security5/UpdateSCryptPasswordEncoder.java"
    },
    {
      "className": "UpdateArgon2PasswordEncoder",
      "displayName": "Use new `Argon2PasswordEncoder` factory methods",
      "description": "In Spring Security 5.8 some `Argon2PasswordEncoder` constructors have been deprecated in favor of factory methods. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security5/UpdateArgon2PasswordEncoder.java"
    },
    {
      "className": "UseNewSecurityMatchers",
      "displayName": "Use the new `securityMatcher()` method",
      "description": "In Spring Security 5.8, the `HttpSecurity#antMatcher()`, `HttpSecurity#mvcMatcher()`, and `HttpSecurity#regexMatcher()` methods were deprecated ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security5/UseNewSecurityMatchers.java"
    },
    {
      "className": "AuthorizeHttpRequests",
      "displayName": "Replace `HttpSecurity.authorizeRequests(...)` with `HttpSecurity.authorizeHttpRequests(...)` and `ExpressionUrlAuthorizationConfigurer`, `AbstractInterceptUrlConfigurer` with `AuthorizeHttpRequestsConfigurer`, etc",
      "description": "Replace `HttpSecurity.authorizeRequests(...)` deprecated in Spring Security 6 with `HttpSecurity.authorizeHttpRequests(...)` and all method calls on the resultant object respectively. Replace deprecated `AbstractInterceptUrlConfigurer` and its deprecated subclasses with `AuthorizeHttpRequestsConfigurer` and its corresponding subclasses.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security5/AuthorizeHttpRequests.java"
    },
    {
      "className": "UseNewRequestMatchers",
      "displayName": "Use the new `requestMatchers` methods",
      "description": "In Spring Security 5.8, the `antMatchers`, `mvcMatchers`, and `regexMatchers` methods were deprecated ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security5/UseNewRequestMatchers.java"
    },
    {
      "className": "UpdatePbkdf2PasswordEncoder",
      "displayName": "Use new `Pbkdf2PasswordEncoder` factory methods",
      "description": "In Spring Security 5.8 some `Pbkdf2PasswordEncoder` constructors have been deprecated in favor of factory methods. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security5/UpdatePbkdf2PasswordEncoder.java"
    },
    {
      "className": "WebSecurityConfigurerAdapter",
      "displayName": "Spring Security 5.4 introduces the ability to configure `HttpSecurity` by creating a `SecurityFilterChain` bean",
      "description": "The Spring Security `WebSecurityConfigurerAdapter` was deprecated 5.7, this recipe will transform `WebSecurityConfigurerAdapter` classes by using a component based approach. Check out the [spring-security-without-the-websecurityconfigureradapter](https://spring.io/blog/2022/02/21/spring-security-without-the-websecurityconfigureradapter) blog for more details.",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/java/spring/security5/WebSecurityConfigurerAdapter.java"
    },
    {
      "className": "AddSpringDependencyManagementPlugin",
      "displayName": "Add `io.spring.dependency-management` plugin, if in use",
      "description": "Prior to Spring Boot 2.0 the dependency management plugin was applied automatically as part of the overall spring boot plugin. ",
      "recipeType": "Spring",
      "repository": "rewrite-spring",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-spring/src/main/java/org/openrewrite/gradle/spring/AddSpringDependencyManagementPlugin.java"
    },
    {
      "className": "JUnitAssertInstanceOfToAssertThat",
      "displayName": "JUnit `assertInstanceOf` to AssertJ",
      "description": "Convert JUnit-style `assertInstanceOf()` to AssertJ's `assertThat().isInstanceOf()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitAssertInstanceOfToAssertThat.java"
    },
    {
      "className": "JUnitAssertThrowsToAssertExceptionType",
      "displayName": "JUnit AssertThrows to AssertJ exceptionType",
      "description": "Convert `JUnit#AssertThrows` to `AssertJ#assertThatExceptionOfType` to allow for chained assertions on the thrown exception.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitAssertThrowsToAssertExceptionType.java"
    },
    {
      "className": "JUnitAssertTrueToAssertThat",
      "displayName": "JUnit `assertTrue` to AssertJ",
      "description": "Convert JUnit-style `assertTrue()` to AssertJ's `assertThat().isTrue()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitAssertTrueToAssertThat.java"
    },
    {
      "className": "JUnitAssertNullToAssertThat",
      "displayName": "JUnit `assertNull` to AssertJ",
      "description": "Convert JUnit-style `assertNull()` to AssertJ's `assertThat().isNull()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitAssertNullToAssertThat.java"
    },
    {
      "className": "SimplifyRedundantAssertJChains",
      "displayName": "Simplify redundant AssertJ assertion chains",
      "description": "Removes redundant AssertJ assertions when chained methods already provide the same or stronger guarantees.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/SimplifyRedundantAssertJChains.java"
    },
    {
      "className": "JUnitAssertArrayEqualsToAssertThat",
      "displayName": "JUnit `assertArrayEquals` to assertJ",
      "description": "Convert JUnit-style `assertArrayEquals()` to AssertJ's `assertThat().contains()` equivalents.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitAssertArrayEqualsToAssertThat.java"
    },
    {
      "className": "SimplifyHasSizeAssertion",
      "displayName": "Simplify AssertJ assertions with `hasSize` argument",
      "description": "Simplify AssertJ assertions by replacing `hasSize` with `hasSameSizeAs` dedicated assertions.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/SimplifyHasSizeAssertion.java"
    },
    {
      "className": "JUnitAssertEqualsToAssertThat",
      "displayName": "JUnit `assertEquals` to AssertJ",
      "description": "Convert JUnit-style `assertEquals()` to AssertJ's `assertThat().isEqualTo()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitAssertEqualsToAssertThat.java"
    },
    {
      "className": "JUnitAssertFalseToAssertThat",
      "displayName": "JUnit `assertFalse` to AssertJ",
      "description": "Convert JUnit-style `assertFalse()` to AssertJ's `assertThat().isFalse()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitAssertFalseToAssertThat.java"
    },
    {
      "className": "CollapseConsecutiveAssertThatStatements",
      "displayName": "Collapse consecutive `assertThat` statements",
      "description": "Collapse consecutive `assertThat` statements into single `assertThat` chained statement. This recipe ignores `assertThat` statements that have method invocation as parameter.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/CollapseConsecutiveAssertThatStatements.java"
    },
    {
      "className": "SimplifyAssertJAssertion",
      "displayName": "Simplify AssertJ assertions with literal arguments",
      "description": "Simplify AssertJ assertions by replacing them with more expressive dedicated assertions.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/SimplifyAssertJAssertion.java"
    },
    {
      "className": "AdoptAssertJDurationAssertions",
      "displayName": "Adopt AssertJ Duration assertions",
      "description": "Adopt AssertJ `DurationAssert` assertions for more expressive messages.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/AdoptAssertJDurationAssertions.java"
    },
    {
      "className": "JUnitAssertNotEqualsToAssertThat",
      "displayName": "JUnit `assertNotEquals` to AssertJ",
      "description": "Convert JUnit-style `assertNotEquals()` to AssertJ's `assertThat().isNotEqualTo()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitAssertNotEqualsToAssertThat.java"
    },
    {
      "className": "JUnitAssertNotNullToAssertThat",
      "displayName": "JUnit `assertNotNull` to AssertJ",
      "description": "Convert JUnit-style `assertNotNull()` to AssertJ's `assertThat().isNotNull()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitAssertNotNullToAssertThat.java"
    },
    {
      "className": "JUnitTryFailToAssertThatThrownBy",
      "displayName": "Convert try-catch-fail blocks to AssertJ's assertThatThrownBy",
      "description": "Replace try-catch blocks where the try block ends with a `fail()` statement and the catch block optionally ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitTryFailToAssertThatThrownBy.java"
    },
    {
      "className": "SimplifyChainedAssertJAssertion",
      "displayName": "Simplify AssertJ chained assertions",
      "description": "Many AssertJ chained assertions have dedicated assertions that function the same. ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/SimplifyChainedAssertJAssertion.java"
    },
    {
      "className": "JUnitFailToAssertJFail",
      "displayName": "JUnit fail to AssertJ",
      "description": "Convert JUnit-style `fail()` to AssertJ's `fail()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitFailToAssertJFail.java"
    },
    {
      "className": "JUnitAssertSameToAssertThat",
      "displayName": "JUnit `assertSame` to AssertJ",
      "description": "Convert JUnit-style `assertSame()` to AssertJ's `assertThat().isSameAs()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/assertj/JUnitAssertSameToAssertThat.java"
    },
    {
      "className": "MinimumJreConditions",
      "displayName": "Migrate JUnit JRE conditions",
      "description": "This recipe will:\\n",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit6/MinimumJreConditions.java"
    },
    {
      "className": "HamcrestInstanceOfToJUnit5",
      "displayName": "Migrate from Hamcrest `instanceOf` matcher to JUnit 5",
      "description": "Migrate from Hamcrest `instanceOf` and `isA` matcher to JUnit5 `assertInstanceOf` assertion.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/hamcrest/HamcrestInstanceOfToJUnit5.java"
    },
    {
      "className": "HamcrestNotMatcherToAssertJ",
      "displayName": "Migrate Hamcrest `not(Matcher)` to AssertJ",
      "description": "Migrate from Hamcrest `not(Matcher)` to AssertJ assertions.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/hamcrest/HamcrestNotMatcherToAssertJ.java"
    },
    {
      "className": "RemoveIsMatcher",
      "displayName": "Remove Hamcrest `is(Matcher)`",
      "description": "Remove Hamcrest `is(Matcher)` ahead of migration.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/hamcrest/RemoveIsMatcher.java"
    },
    {
      "className": "HamcrestIsMatcherToAssertJ",
      "displayName": "Migrate Hamcrest `is(Object)` to AssertJ",
      "description": "Migrate Hamcrest `is(Object)` to AssertJ `Assertions.assertThat(..)`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/hamcrest/HamcrestIsMatcherToAssertJ.java"
    },
    {
      "className": "AssertThatBooleanToAssertJ",
      "displayName": "Migrate Hamcrest `assertThat(boolean, Matcher)` to AssertJ",
      "description": "Replace Hamcrest `assertThat(String, boolean)` with AssertJ `assertThat(boolean).as(String).isTrue()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/hamcrest/AssertThatBooleanToAssertJ.java"
    },
    {
      "className": "HamcrestMatcherToJUnit5",
      "displayName": "Migrate from Hamcrest `Matcher` to JUnit 5",
      "description": "Migrate from Hamcrest `Matcher` to JUnit 5 assertions.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/hamcrest/HamcrestMatcherToJUnit5.java"
    },
    {
      "className": "HamcrestMatcherToAssertJ",
      "displayName": "Migrate from Hamcrest `Matcher` to AssertJ",
      "description": "Migrate from Hamcrest `Matcher` to AssertJ assertions.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/hamcrest/HamcrestMatcherToAssertJ.java"
    },
    {
      "className": "HamcrestOfMatchersToAssertJ",
      "displayName": "Migrate `anyOf` Hamcrest Matcher to AssertJ",
      "description": "Migrate the `anyOf` Hamcrest Matcher to AssertJ's `satisfiesAnyOf` assertion.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/hamcrest/HamcrestOfMatchersToAssertJ.java"
    },
    {
      "className": "JMockitAnnotatedArgumentToMockito",
      "displayName": "Convert JMockit `@Mocked` and `@Injectable` annotated arguments",
      "description": "Convert JMockit `@Mocked` and `@Injectable` annotated arguments into Mockito statements.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/jmockit/JMockitAnnotatedArgumentToMockito.java"
    },
    {
      "className": "JMockitBlockToMockito",
      "displayName": "Rewrite JMockit ",
      "description": "Rewrites JMockit `",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/jmockit/JMockitBlockToMockito.java"
    },
    {
      "className": "JMockitMockUpToMockito",
      "displayName": "Rewrite JMockit MockUp to Mockito statements",
      "description": "Rewrites JMockit `MockUp` blocks to Mockito statements. This recipe will not rewrite private methods in MockUp.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/jmockit/JMockitMockUpToMockito.java"
    },
    {
      "className": "TestNgAssertNotEqualsToAssertThat",
      "displayName": "TestNG `assertNotEquals` to AssertJ",
      "description": "Convert TestNG-style `assertNotEquals()` to AssertJ's `assertThat().isNotEqualTo()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/testng/TestNgAssertNotEqualsToAssertThat.java"
    },
    {
      "className": "TestNgAssertEqualsToAssertThat",
      "displayName": "TestNG `assertEquals` to AssertJ",
      "description": "Convert TestNG-style `assertEquals()` to AssertJ's `assertThat().isEqualTo()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/testng/TestNgAssertEqualsToAssertThat.java"
    },
    {
      "className": "FindUnitTests",
      "displayName": "Find unit tests",
      "description": "Produces a data table showing how methods are used in unit tests.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/search/FindUnitTests.java"
    },
    {
      "className": "UpdateBeforeAfterAnnotations",
      "displayName": "Migrate JUnit 4 lifecycle annotations to JUnit Jupiter",
      "description": "Replace JUnit 4's `@Before`, `@BeforeClass`, `@After`, and `@AfterClass` annotations with their JUnit Jupiter equivalents.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/UpdateBeforeAfterAnnotations.java"
    },
    {
      "className": "EnclosedToNested",
      "displayName": "JUnit 4 `@RunWith(Enclosed.class)` to JUnit Jupiter `@Nested`",
      "description": "Removes the `Enclosed` specification from a class, with `Nested` added to its inner classes by `AddMissingNested`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/EnclosedToNested.java"
    },
    {
      "className": "TempDirNonFinal",
      "displayName": "Make `@TempDir` fields non final",
      "description": "Make JUnit 5's `org.junit.jupiter.api.io.TempDir` fields non final.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/TempDirNonFinal.java"
    },
    {
      "className": "TimeoutRuleToClassAnnotation",
      "displayName": "JUnit 4 `@Rule Timeout` to JUnit Jupiter's `Timeout`",
      "description": "Replace usages of JUnit 4's `@Rule Timeout` with JUnit 5 `Timeout` class annotation.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/TimeoutRuleToClassAnnotation.java"
    },
    {
      "className": "RemoveTryCatchFailBlocks",
      "displayName": "Replace `fail()` in `try-catch` blocks with `Assertions.assertDoesNotThrow(() -> { ... })`",
      "description": "Replace `try-catch` blocks where `catch` merely contains a `fail()` for `fail(String)` statement ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/RemoveTryCatchFailBlocks.java"
    },
    {
      "className": "AssertThrowsOnLastStatement",
      "displayName": "Applies JUnit 5 `assertThrows` on last statement in lambda block only",
      "description": "Applies JUnit 5 `assertThrows` on last statement in lambda block only. ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/AssertThrowsOnLastStatement.java"
    },
    {
      "className": "MigrateJUnitTestCase",
      "displayName": "Migrate JUnit 4 `TestCase` to JUnit Jupiter",
      "description": "Convert JUnit 4 `TestCase` to JUnit Jupiter.",
      "recipeType": "Migration",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/MigrateJUnitTestCase.java"
    },
    {
      "className": "RemoveObsoleteRunners",
      "displayName": "Remove JUnit 4 `@RunWith` annotations that do not require an `@ExtendsWith` replacement",
      "description": "Some JUnit 4 `@RunWith` annotations do not require replacement with an equivalent JUnit Jupiter `@ExtendsWith` annotation. ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/RemoveObsoleteRunners.java"
    },
    {
      "className": "AddParameterizedTestAnnotation",
      "displayName": "Add missing `@ParameterizedTest` annotation when `@ValueSource` is used or ",
      "description": "Add missing `@ParameterizedTest` annotation when `@ValueSource` is used or ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/AddParameterizedTestAnnotation.java"
    },
    {
      "className": "ParameterizedRunnerToParameterized",
      "displayName": "JUnit 4 `@RunWith(Parameterized.class)` to JUnit Jupiter parameterized tests",
      "description": "Convert JUnit 4 parameterized runner the JUnit Jupiter parameterized test equivalent.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/ParameterizedRunnerToParameterized.java"
    },
    {
      "className": "AssertTrueInstanceofToAssertInstanceOf",
      "displayName": "assertTrue(x instanceof y) to assertInstanceOf(y.class, x)",
      "description": "Migration of JUnit4 (or potentially JUnit5) test case in form of assertTrue(x instanceof y) to assertInstanceOf(y.class, x).",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/AssertTrueInstanceofToAssertInstanceOf.java"
    },
    {
      "className": "UseTestMethodOrder",
      "displayName": "Migrate from JUnit 4 `@FixedMethodOrder` to JUnit 5 `@TestMethodOrder`",
      "description": "JUnit optionally allows test method execution order to be specified. This replaces JUnit 4 test execution ordering annotations with JUnit 5 replacements.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/UseTestMethodOrder.java"
    },
    {
      "className": "TestRuleToTestInfo",
      "displayName": "JUnit TestName @Rule to JUnit Jupiter TestInfo",
      "description": "Replace usages of JUnit 4's `@Rule TestName` with JUnit 5's TestInfo.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/TestRuleToTestInfo.java"
    },
    {
      "className": "TemporaryFolderToTempDir",
      "displayName": "Use JUnit Jupiter `@TempDir`",
      "description": "Translates JUnit 4's `org.junit.rules.TemporaryFolder` into JUnit 5's `org.junit.jupiter.api.io.TempDir`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/TemporaryFolderToTempDir.java"
    },
    {
      "className": "UpdateTestAnnotation",
      "displayName": "Migrate JUnit 4 `@Test` annotations to JUnit 5",
      "description": "Update usages of JUnit 4's `@org.junit.Test` annotation to JUnit 5's `org.junit.jupiter.api.Test` annotation.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/UpdateTestAnnotation.java"
    },
    {
      "className": "UseWiremockExtension",
      "displayName": "Use wiremock extension",
      "description": "As of 2.31.0, wiremock [supports JUnit 5](https://wiremock.org/docs/junit-jupiter/) via an extension.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/UseWiremockExtension.java"
    },
    {
      "className": "AddMissingTestBeforeAfterAnnotations",
      "displayName": "Add missing `@BeforeEach`, `@AfterEach`, `@Test` to overriding methods",
      "description": "Adds `@BeforeEach`, `@AfterEach`, `@Test` to methods overriding superclass methods if the annotations are present on the superclass method.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/AddMissingTestBeforeAfterAnnotations.java"
    },
    {
      "className": "LifecycleNonPrivate",
      "displayName": "Make lifecycle methods non private",
      "description": "Make JUnit 5's `@AfterAll`, `@AfterEach`, `@BeforeAll` and `@BeforeEach` non private.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/LifecycleNonPrivate.java"
    },
    {
      "className": "CsvSourceToValueSource",
      "displayName": "Replace `@CsvSource` with `@ValueSource` for single method arguments",
      "description": "Replaces JUnit 5's `@CsvSource` annotation with `@ValueSource` when the parameterized test has only a single method argument.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/CsvSourceToValueSource.java"
    },
    {
      "className": "AddHamcrestJUnitDependency",
      "displayName": "Add Hamcrest JUnit dependency",
      "description": "Add Hamcrest JUnit dependency only if JUnit 4's `assertThat` or `assumeThat` is used.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/AddHamcrestJUnitDependency.java"
    },
    {
      "className": "MockitoJUnitToMockitoExtension",
      "displayName": "JUnit 4 `MockitoJUnit` to JUnit Jupiter `MockitoExtension`",
      "description": "Replaces `MockitoJUnit` rules with `MockitoExtension`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/MockitoJUnitToMockitoExtension.java"
    },
    {
      "className": "AssertToAssertions",
      "displayName": "JUnit 4 `Assert` To JUnit Jupiter `Assertions`",
      "description": "Change JUnit 4's `org.junit.Assert` into JUnit Jupiter's `org.junit.jupiter.api.Assertions`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/AssertToAssertions.java"
    },
    {
      "className": "UseAssertSame",
      "displayName": "Use JUnit5's `assertSame` or `assertNotSame` instead of `assertTrue(... == ...)`",
      "description": "Prefers the usage of `assertSame` or `assertNotSame` methods instead of using of vanilla `assertTrue` ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/UseAssertSame.java"
    },
    {
      "className": "CategoryToTag",
      "displayName": "JUnit 4 `@Category` to JUnit Jupiter `@Tag`",
      "description": "Transforms the JUnit 4 `@Category`, which can list multiple categories, into one `@Tag` annotation per category listed.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/CategoryToTag.java"
    },
    {
      "className": "CleanupJUnitImports",
      "displayName": "Cleanup JUnit imports",
      "description": "Removes unused `org.junit` import symbols.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/CleanupJUnitImports.java"
    },
    {
      "className": "AddMissingNested",
      "displayName": "JUnit 5 inner test classes should be annotated with `@Nested`",
      "description": "Adds `@Nested` to inner classes that contain JUnit 5 tests.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/AddMissingNested.java"
    },
    {
      "className": "JUnitParamsRunnerToParameterized",
      "displayName": "Pragmatists `@RunWith(JUnitParamsRunner.class)` to JUnit Jupiter `@Parameterized` tests",
      "description": "Convert Pragmatists Parameterized test to the JUnit Jupiter ParameterizedTest equivalent.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/JUnitParamsRunnerToParameterized.java"
    },
    {
      "className": "UpdateMockWebServer",
      "displayName": "OkHttp 3.x `MockWebServer` `@Rule` To 4.x `MockWebServer`",
      "description": "Replace usages of okhttp3 3.x `@Rule` MockWebServer with 4.x `MockWebServer`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/UpdateMockWebServer.java"
    },
    {
      "className": "RemoveDuplicateTestTemplates",
      "displayName": "Remove duplicates uses of @TestTemplate implementations for a single method",
      "description": "Remove duplicates uses of @TestTemplate implementations for a single method.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/RemoveDuplicateTestTemplates.java"
    },
    {
      "className": "AddJupiterDependencies",
      "displayName": "Add JUnit Jupiter dependencies",
      "description": "Adds JUnit Jupiter dependencies to a Maven or Gradle project. ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/AddJupiterDependencies.java"
    },
    {
      "className": "RunnerToExtension",
      "displayName": "JUnit 4 `@RunWith` to JUnit Jupiter `@ExtendWith`",
      "description": "Replace runners with the JUnit Jupiter extension equivalent.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/RunnerToExtension.java"
    },
    {
      "className": "EnvironmentVariables",
      "displayName": "Migrate JUnit 4 environmentVariables rule to JUnit 5 system stubs extension",
      "description": "Replaces usage of the JUnit 4 `@Rule EnvironmentVariables` with the JUnit 5-compatible ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/EnvironmentVariables.java"
    },
    {
      "className": "GradleUseJunitJupiter",
      "displayName": "Gradle `Test` use JUnit Jupiter",
      "description": "By default Gradle's `Test` tasks use JUnit 4. ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/GradleUseJunitJupiter.java"
    },
    {
      "className": "ExpectedExceptionToAssertThrows",
      "displayName": "JUnit 4 `ExpectedException` To JUnit Jupiter's `assertThrows()`",
      "description": "Replace usages of JUnit 4's `@Rule ExpectedException` with JUnit 5's `Assertions.assertThrows()`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/junit5/ExpectedExceptionToAssertThrows.java"
    },
    {
      "className": "SimplifyTestThrows",
      "displayName": "Simplify `throws` statements of tests",
      "description": "Replace all thrown exception classes of test method signatures by `Exception`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/SimplifyTestThrows.java"
    },
    {
      "className": "RemoveTestPrefix",
      "displayName": "Remove `test` prefix from JUnit 5 tests",
      "description": "Remove `test` from methods with `@Test`, `@ParameterizedTest`, `@RepeatedTest` or `@TestFactory`. They no longer have to prefix test to be usable by JUnit 5.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/RemoveTestPrefix.java"
    },
    {
      "className": "AssertTrueNullToAssertNull",
      "displayName": "Replace JUnit `assertTrue(a == null)` to `assertNull(a)`",
      "description": "Using `assertNull(a)` is simpler and more clear.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertTrueNullToAssertNull.java"
    },
    {
      "className": "AssertNotEqualsBooleanToAssertBoolean",
      "displayName": "Replace JUnit `assertNotEquals(false, <boolean>)` to `assertFalse(<boolean>)` / `assertTrue(<boolean>)`",
      "description": "Using `assertFalse` or `assertTrue` is simpler and more clear.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertNotEqualsBooleanToAssertBoolean.java"
    },
    {
      "className": "TestsShouldIncludeAssertions",
      "displayName": "Include an assertion in tests",
      "description": "For tests not having any assertions, wrap the statements with JUnit Jupiter's `Assertions#assertDoesNotThrow(..)`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/TestsShouldIncludeAssertions.java"
    },
    {
      "className": "AssertFalseNegationToAssertTrue",
      "displayName": "Replace JUnit `assertFalse(!<boolean>)` to `assertTrue(<boolean>)`",
      "description": "Using `assertTrue` is simpler and more clear.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertFalseNegationToAssertTrue.java"
    },
    {
      "className": "AssertTrueComparisonToAssertEquals",
      "displayName": "Junit `assertTrue(a == b)` to `assertEquals(a,b)`",
      "description": "Using `assertEquals(a,b)` is simpler and more clear.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertTrueComparisonToAssertEquals.java"
    },
    {
      "className": "AssertFalseNullToAssertNotNull",
      "displayName": "Replace JUnit `assertFalse(a == null)` to `assertNotNull(a)`",
      "description": "Using `assertNotNull(a)` is simpler and more clear.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertFalseNullToAssertNotNull.java"
    },
    {
      "className": "AssertFalseEqualsToAssertNotEquals",
      "displayName": "Replace JUnit `assertFalse(a.equals(b))` to `assertNotEquals(a,b)`",
      "description": "Using `assertNotEquals(a,b)` is simpler and more clear.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertFalseEqualsToAssertNotEquals.java"
    },
    {
      "className": "AssertionsArgumentOrder",
      "displayName": "Assertion arguments should be passed in the correct order",
      "description": "Assertions such as `org.junit.Assert.assertEquals` expect the first argument to be the expected value and the second argument to be the actual value; for `org.testng.Assert`, it’s the other way around.  This recipe detects `J.Literal`, `J.NewArray`, and `java.util.Iterable` arguments swapping them if necessary so that the error messages won't be confusing.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertionsArgumentOrder.java"
    },
    {
      "className": "AssertTrueNegationToAssertFalse",
      "displayName": "Replace JUnit `assertTrue(!<boolean>)` to `assertFalse(<boolean>)`",
      "description": "Using `assertFalse` is simpler and more clear.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertTrueNegationToAssertFalse.java"
    },
    {
      "className": "TestsShouldNotBePublic",
      "displayName": "Remove `public` visibility of JUnit 5 tests",
      "description": "Remove `public` and optionally `protected` modifiers from methods with `@Test`, `@ParameterizedTest`, `@RepeatedTest`, `@TestFactory`, `@BeforeEach`, `@AfterEach`, `@BeforeAll`, or `@AfterAll`. They no longer have to be public visibility to be usable by JUnit 5.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/TestsShouldNotBePublic.java"
    },
    {
      "className": "TestMethodsShouldBeVoid",
      "displayName": "Test methods should have void return type",
      "description": "Test methods annotated with `@Test`, `@ParameterizedTest`, `@RepeatedTest`, `@TestTemplate` ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/TestMethodsShouldBeVoid.java"
    },
    {
      "className": "RemoveEmptyTests",
      "displayName": "Remove empty tests without comments",
      "description": "Removes empty methods with a `@Test` annotation if the body does not have comments.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/RemoveEmptyTests.java"
    },
    {
      "className": "AssertTrueEqualsToAssertEquals",
      "displayName": "Replace JUnit `assertTrue(a.equals(b))` to `assertEquals(a,b)`",
      "description": "Using `assertEquals(a,b)` is simpler and more clear.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertTrueEqualsToAssertEquals.java"
    },
    {
      "className": "AssertEqualsNullToAssertNull",
      "displayName": "`assertEquals(a, null)` to `assertNull(a)`",
      "description": "Using `assertNull(a)` is simpler and more clear.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertEqualsNullToAssertNull.java"
    },
    {
      "className": "AssertEqualsBooleanToAssertBoolean",
      "displayName": "Replace JUnit `assertEquals(false, <boolean>)` to `assertFalse(<boolean>)` / `assertTrue(<boolean>)`",
      "description": "Using `assertFalse` or `assertTrue` is simpler and more clear.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/cleanup/AssertEqualsBooleanToAssertBoolean.java"
    },
    {
      "className": "ExplicitContainerImage",
      "displayName": "Add image argument to container constructor",
      "description": "Set the image to use for a container explicitly if unset, rather than relying on the default image for the container class.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/testcontainers/ExplicitContainerImage.java"
    },
    {
      "className": "EasyMockVerifyToMockitoVerify",
      "displayName": "Replace EasyMock `verify` calls with Mockito `verify` calls",
      "description": "Replace `EasyMock.verify(dependency)` with individual `Mockito.verify(dependency).method()` calls based on expected methods.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/easymock/EasyMockVerifyToMockitoVerify.java"
    },
    {
      "className": "RemoveExtendsEasyMockSupport",
      "displayName": "Migrate Test classes that extend `org.easymock.EasyMockSupport` to use Mockito",
      "description": "Modify test classes by removing extends EasyMockSupport and replacing EasyMock methods with Mockito equivalents.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/easymock/RemoveExtendsEasyMockSupport.java"
    },
    {
      "className": "CleanupPowerMockImports",
      "displayName": "Cleanup PowerMock imports",
      "description": "Removes unused `org.powermock` import symbols.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/CleanupPowerMockImports.java"
    },
    {
      "className": "MockitoWhenOnStaticToMockStatic",
      "displayName": "Replace `Mockito.when` on static (non mock) with try-with-resource with MockedStatic",
      "description": "Replace `Mockito.when` on static (non mock) with try-with-resource with MockedStatic as Mockito4 no longer allows this. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/MockitoWhenOnStaticToMockStatic.java"
    },
    {
      "className": "RemoveTimesZeroAndOne",
      "displayName": "Remove `Mockito.times(0)` and `Mockito.times(1)`",
      "description": "Remove `Mockito.times(0)` and `Mockito.times(1)` from `Mockito.verify()` calls.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/RemoveTimesZeroAndOne.java"
    },
    {
      "className": "MockitoJUnitRunnerToExtension",
      "displayName": "Replace JUnit 4 MockitoJUnitRunner with junit-jupiter MockitoExtension",
      "description": "Replace JUnit 4 MockitoJUnitRunner annotations with JUnit 5 `@ExtendWith(MockitoExtension.class)` ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/MockitoJUnitRunnerToExtension.java"
    },
    {
      "className": "PowerMockitoMockStaticToMockito",
      "displayName": "Replace `PowerMock.mockStatic()` with `Mockito.mockStatic()`",
      "description": "Replaces `PowerMockito.mockStatic()` by `Mockito.mockStatic()`. Removes ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/PowerMockitoMockStaticToMockito.java"
    },
    {
      "className": "PowerMockitoWhenNewToMockito",
      "displayName": "Replace `PowerMockito.whenNew` with Mockito counterpart",
      "description": "Replaces `PowerMockito.whenNew` calls with respective `Mockito.whenConstructed` calls.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/PowerMockitoWhenNewToMockito.java"
    },
    {
      "className": "CloseUnclosedStaticMocks",
      "displayName": "Close unclosed static mocks",
      "description": "Ensures that all `mockStatic` calls are properly closed. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/CloseUnclosedStaticMocks.java"
    },
    {
      "className": "MockUtilsToStatic",
      "displayName": "Use static form of Mockito `MockUtil`",
      "description": "Best-effort attempt to remove Mockito `MockUtil` instances.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/MockUtilsToStatic.java"
    },
    {
      "className": "RemoveInitMocksIfRunnersSpecified",
      "displayName": "Remove `MockitoAnnotations.initMocks(this)` if specified JUnit runners",
      "description": "Remove `MockitoAnnotations.initMocks(this)` if specified class-level JUnit runners `@RunWith(MockitoJUnitRunner.class)` or `@ExtendWith(MockitoExtension.class)`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/RemoveInitMocksIfRunnersSpecified.java"
    },
    {
      "className": "SimplifyMockitoVerifyWhenGiven",
      "displayName": "Call to Mockito method \\",
      "description": "Fixes Sonar issue `java:S6068`: Call to Mockito method \\",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/SimplifyMockitoVerifyWhenGiven.java"
    },
    {
      "className": "AnyStringToNullable",
      "displayName": "Replace Mockito 1.x `anyString()` with `nullable(String.class)`",
      "description": "Since Mockito 2.10 `anyString()` no longer matches null values. Use `nullable(Class)` instead.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/AnyStringToNullable.java"
    },
    {
      "className": "AnyToNullable",
      "displayName": "Replace Mockito 1.x `anyString()`/`any()` with `nullable(Class)`",
      "description": "Since Mockito 2.10 `anyString()` and `any()` no longer matches null values. Use `nullable(Class)` instead.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/AnyToNullable.java"
    },
    {
      "className": "ReplaceInitMockToOpenMock",
      "displayName": "Replace `MockitoAnnotations.initMocks(this)` to `MockitoAnnotations.openMocks(this)`",
      "description": "Replace `MockitoAnnotations.initMocks(this)` to `MockitoAnnotations.openMocks(this)` and generate `AutoCloseable` mocks.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/ReplaceInitMockToOpenMock.java"
    },
    {
      "className": "MockitoJUnitRunnerSilentToExtension",
      "displayName": "JUnit 4 MockitoJUnitRunner.Silent to JUnit Jupiter MockitoExtension with LENIENT settings",
      "description": "Replace `@RunWith(MockitoJUnitRunner.Silent.class)` with `@ExtendWith(MockitoExtension.class)` and `@MockitoSettings(strictness = Strictness.LENIENT)`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/MockitoJUnitRunnerSilentToExtension.java"
    },
    {
      "className": "CleanupMockitoImports",
      "displayName": "Cleanup Mockito imports",
      "description": "Removes unused `org.mockito` import symbols, unless its possible they are associated with method invocations having null or unknown type information.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/CleanupMockitoImports.java"
    },
    {
      "className": "VerifyZeroToNoMoreInteractions",
      "displayName": "Replace `verifyZeroInteractions()` with `verifyNoMoreInteractions()`",
      "description": "Replaces `verifyZeroInteractions()` with `verifyNoMoreInteractions()` in Mockito tests when migration when using a Mockito version < 3.x.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/mockito/VerifyZeroToNoMoreInteractions.java"
    },
    {
      "className": "ExecutionListenerToDbRiderAnnotation",
      "displayName": "Migrate the `DBRiderTestExecutionListener` to the `@DBRider` annotation",
      "description": "Migrate the `DBRiderTestExecutionListener` to the `@DBRider` annotation. ",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/dbrider/ExecutionListenerToDbRiderAnnotation.java"
    },
    {
      "className": "ReplaceArquillianInSequenceAnnotation",
      "displayName": "Arquillian JUnit 4 `@InSequence` to JUnit Jupiter `@Order`",
      "description": "Transforms the Arquillian JUnit 4 `@InSequence` to the JUnit Jupiter `@Order`.",
      "recipeType": "Testing",
      "repository": "rewrite-testing-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-testing-frameworks/src/main/java/org/openrewrite/java/testing/arquillian/ReplaceArquillianInSequenceAnnotation.java"
    },
    {
      "className": "JpaCacheProperties",
      "displayName": "Disable the persistence unit second-level cache",
      "description": "Sets an explicit value for the shared cache mode.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/JpaCacheProperties.java"
    },
    {
      "className": "RemovedSecurityManagerMethods",
      "displayName": "Replace deprecated methods in`SecurityManager`",
      "description": "Replace `SecurityManager` methods `checkAwtEventQueueAccess()`, `checkSystemClipboardAccess()`, ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/RemovedSecurityManagerMethods.java"
    },
    {
      "className": "UpgradeJavaVersion",
      "displayName": "Upgrade Java version",
      "description": "Upgrade build plugin configuration to use the specified Java version. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/UpgradeJavaVersion.java"
    },
    {
      "className": "ArrayStoreExceptionToTypeNotPresentException",
      "displayName": "Catch `TypeNotPresentException` thrown by `Class.getAnnotation()`",
      "description": "Replace catch blocks for `ArrayStoreException` around `Class.getAnnotation()` with `TypeNotPresentException` to ensure compatibility with Java 11+.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/ArrayStoreExceptionToTypeNotPresentException.java"
    },
    {
      "className": "UpdateSdkMan",
      "displayName": "Update SDKMan Java version",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/UpdateSdkMan.java"
    },
    {
      "className": "DontOverfetchDto",
      "displayName": "Replace DTO method parameters with data elements",
      "description": "Replace method parameters that have DTOs with their ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/DontOverfetchDto.java"
    },
    {
      "className": "UseTabsOrSpaces",
      "displayName": "Force indentation to either tabs or spaces",
      "description": "This is useful for one-off migrations of a codebase that has mixed indentation styles, while ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/UseTabsOrSpaces.java"
    },
    {
      "className": "ReplaceStringLiteralValue",
      "displayName": "Replace `String` literal",
      "description": "Replace the value of a complete `String` literal.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/ReplaceStringLiteralValue.java"
    },
    {
      "className": "ReferenceCloneMethod",
      "displayName": "Replace `java.lang.ref.Reference.clone()` with constructor call",
      "description": "The recipe replaces any clone calls that may resolve to a `java.lang.ref.Reference.clone()` ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/ReferenceCloneMethod.java"
    },
    {
      "className": "ChangeDefaultKeyStore",
      "displayName": "Return String `jks` when  `KeyStore.getDefaultType()` is called",
      "description": "In Java 11 the default keystore was updated from JKS to PKCS12. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/ChangeDefaultKeyStore.java"
    },
    {
      "className": "AddStaticVariableOnProducerSessionBean",
      "displayName": "Adds `static` modifier to `@Produces` fields that are in session beans",
      "description": "Ensures that the fields annotated with `@Produces` which is inside the session bean (`@Stateless`, `@Stateful`, or `@Singleton`) are declared `static`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/AddStaticVariableOnProducerSessionBean.java"
    },
    {
      "className": "AddMissingMethodImplementation",
      "displayName": "Adds missing method implementations",
      "description": "Check for missing methods required by interfaces and adds them.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/AddMissingMethodImplementation.java"
    },
    {
      "className": "ReplaceAWTGetPeerMethod",
      "displayName": "Replace AWT `getPeer()` method",
      "description": "This recipe replaces the use of `getPeer()` method in `java.awt.*` classes. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/ReplaceAWTGetPeerMethod.java"
    },
    {
      "className": "RemoveIllegalSemicolons",
      "displayName": "Remove illegal semicolons",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/RemoveIllegalSemicolons.java"
    },
    {
      "className": "MXBeanRule",
      "displayName": "MBean and MXBean interfaces must be public",
      "description": "Sets visibility of MBean and MXBean interfaces to public.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/MXBeanRule.java"
    },
    {
      "className": "ChangeMethodInvocationReturnType",
      "displayName": "Change method invocation return type",
      "description": "Changes the return type of a method invocation.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/ChangeMethodInvocationReturnType.java"
    },
    {
      "className": "IllegalArgumentExceptionToAlreadyConnectedException",
      "displayName": "Replace `IllegalArgumentException` with `AlreadyConnectedException` in `DatagramChannel.send()` method",
      "description": "Replace `IllegalArgumentException` with `AlreadyConnectedException` for DatagramChannel.send() to ensure compatibility with Java 11+.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/IllegalArgumentExceptionToAlreadyConnectedException.java"
    },
    {
      "className": "ReplaceComSunAWTUtilitiesMethods",
      "displayName": "Replace `com.sun.awt.AWTUtilities` static method invocations",
      "description": "This recipe replaces several static calls  in `com.sun.awt.AWTUtilities` with the JavaSE 11 equivalent. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/ReplaceComSunAWTUtilitiesMethods.java"
    },
    {
      "className": "UseJavaUtilBase64",
      "displayName": "Prefer `java.util.Base64` instead of `sun.misc`",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/UseJavaUtilBase64.java"
    },
    {
      "className": "JREThrowableFinalMethods",
      "displayName": "Rename final method declarations `getSuppressed()` and `addSuppressed(Throwable exception)` in classes that extend `Throwable`",
      "description": "The recipe renames  `getSuppressed()` and `addSuppressed(Throwable exception)` methods  in classes ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/JREThrowableFinalMethods.java"
    },
    {
      "className": "CastArraysAsListToList",
      "displayName": "Remove explicit casts on `Arrays.asList(..).toArray()`",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/CastArraysAsListToList.java"
    },
    {
      "className": "ReplaceLocalizedStreamMethods",
      "displayName": "Replace `getLocalizedInputStream` and `getLocalizedOutputStream` with direct assignment",
      "description": "Replaces `Runtime.getLocalizedInputStream(InputStream)` and `Runtime.getLocalizedOutputStream(OutputStream)` with their direct arguments. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/ReplaceLocalizedStreamMethods.java"
    },
    {
      "className": "AddJDeprScanPlugin",
      "displayName": "Add `JDeprScan` Maven Plug-in",
      "description": "Add the `JDeprScan` Maven plugin to scan class files for uses of deprecated APIs.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/AddJDeprScanPlugin.java"
    },
    {
      "className": "AddSuppressionForIllegalReflectionWarningsPlugin",
      "displayName": "Add maven jar plugin to suppress illegal reflection warnings",
      "description": "Adds a maven jar plugin that's configured to suppress Illegal Reflection Warnings.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/AddSuppressionForIllegalReflectionWarningsPlugin.java"
    },
    {
      "className": "BeanDiscovery",
      "displayName": "Behavior change to bean discovery in modules with `beans.xml` file with no version specified",
      "description": "Alters beans with missing version attribute to include this attribute as well as the bean-discovery-mode=\\",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/BeanDiscovery.java"
    },
    {
      "className": "BeansXmlNamespace",
      "displayName": "Change `beans.xml` `schemaLocation` to match XML namespace",
      "description": "Set the `schemaLocation` that corresponds to the `xmlns` set in `beans.xml` files.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/BeansXmlNamespace.java"
    },
    {
      "className": "SimplifyMicrometerMeterTags",
      "displayName": "Simplify [Micrometer](https://micrometer.io) meter tags",
      "description": "Use the simplest method to add new tags.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/metrics/SimplifyMicrometerMeterTags.java"
    },
    {
      "className": "MigrateMulticastSocketSetTTLToSetTimeToLive",
      "displayName": "Use `java.net.MulticastSocket#setTimeToLive(int)`",
      "description": "Use `java.net.MulticastSocket#setTimeToLive(int)` instead of the deprecated `java.net.MulticastSocket#setTTL(byte)` in Java 1.2 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/net/MigrateMulticastSocketSetTTLToSetTimeToLive.java"
    },
    {
      "className": "MigrateURLDecoderDecode",
      "displayName": "Use `java.net.URLDecoder#decode(String, StandardCharsets.UTF_8)`",
      "description": "Use `java.net.URLDecoder#decode(String, StandardCharsets.UTF_8)` instead of the deprecated `java.net.URLDecoder#decode(String)` in Java 10 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/net/MigrateURLDecoderDecode.java"
    },
    {
      "className": "MigrateHttpURLConnectionHttpServerErrorToHttpInternalError",
      "displayName": "Use `java.net.HttpURLConnection.HTTP_INTERNAL_ERROR`",
      "description": "Use `java.net.HttpURLConnection.HTTP_INTERNAL_ERROR` instead of the deprecated `java.net.HttpURLConnection.HTTP_SERVER_ERROR`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/net/MigrateHttpURLConnectionHttpServerErrorToHttpInternalError.java"
    },
    {
      "className": "URLConstructorsToNewURI",
      "displayName": "Convert `new URL(String, ..)` to `new URI(String, ..).toURL()`",
      "description": "Converts `new URL(String, ..)` constructors to `new URI(String, ..).toURL()`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/net/URLConstructorsToNewURI.java"
    },
    {
      "className": "MigrateURLEncoderEncode",
      "displayName": "Use `java.net.URLEncoder#encode(String, StandardCharsets.UTF_8)`",
      "description": "Use `java.net.URLEncoder#encode(String, StandardCharsets.UTF_8)` instead of the deprecated `java.net.URLEncoder#encode(String)` in Java 10 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/net/MigrateURLEncoderEncode.java"
    },
    {
      "className": "URLConstructorToURICreate",
      "displayName": "Convert `new URL(String)` to `URI.create(String).toURL()`",
      "description": "Converts `new URL(String)` constructor to `URI.create(String).toURL()`. The URL constructor has been deprecated due to security vulnerabilities when handling malformed URLs. Using `URI.create(String)` provides stronger validation and safer URL handling in modern Java applications.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/net/URLConstructorToURICreate.java"
    },
    {
      "className": "UseLombokGetter",
      "displayName": "Convert getter methods to annotations",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lombok/UseLombokGetter.java"
    },
    {
      "className": "UseLombokSetter",
      "displayName": "Convert setter methods to annotations",
      "description": "Convert trivial setter methods to `@Setter` annotations on their respective fields.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lombok/UseLombokSetter.java"
    },
    {
      "className": "LombokValToFinalVar",
      "displayName": "Prefer `final var` over `lombok.val`",
      "description": "Prefer the Java standard library's `final var` and `var` over third-party usage of Lombok's `lombok.val` and `lombok.var` in Java 10 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lombok/LombokValToFinalVar.java"
    },
    {
      "className": "LombokOnXToOnX_",
      "displayName": "Migrate Lombok's `@__` syntax to `onX_` for Java 8+",
      "description": "Migrates Lombok's `onX` annotations from the Java 7 style using `@__` to the Java 8+ style ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lombok/LombokOnXToOnX_.java"
    },
    {
      "className": "AdoptLombokSetterMethodNames",
      "displayName": "Rename setter methods to fit Lombok",
      "description": "Rename methods that are effectively setter to the name Lombok would give them.\\n",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lombok/AdoptLombokSetterMethodNames.java"
    },
    {
      "className": "UseNoArgsConstructor",
      "displayName": "UseNoArgsConstructor",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lombok/UseNoArgsConstructor.java"
    },
    {
      "className": "AdoptLombokGetterMethodNames",
      "displayName": "Rename getter methods to fit Lombok",
      "description": "Rename methods that are effectively getter to the name Lombok would give them.\\n\\n",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lombok/AdoptLombokGetterMethodNames.java"
    },
    {
      "className": "LombokValueToRecord",
      "displayName": "Convert `@lombok.Value` class to Record",
      "description": "Convert Lombok `@Value` annotated classes to standard Java Records.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lombok/LombokValueToRecord.java"
    },
    {
      "className": "UseLogRecipeTemplate",
      "displayName": "UseLogRecipeTemplate",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lombok/log/UseLogRecipeTemplate.java"
    },
    {
      "className": "MigrateCollectionsUnmodifiableSet",
      "displayName": "Prefer `Set.of(..)`",
      "description": "Prefer `Set.Of(..)` instead of using `unmodifiableSet(java.util.Set(java.util.Arrays asList(<args>)))` in Java 9 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/MigrateCollectionsUnmodifiableSet.java"
    },
    {
      "className": "UseLocaleOf",
      "displayName": "Prefer `Locale.of(..)` over `new Locale(..)`",
      "description": "Prefer `Locale.of(..)` over `new Locale(..)` in Java 19 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/UseLocaleOf.java"
    },
    {
      "className": "OptionalStreamRecipe",
      "displayName": "`Stream<Optional>` idiom recipe",
      "description": "Migrate Java 8 `Optional<Stream>.filter(Optional::isPresent).map(Optional::get)` to Java 11 `.flatMap(Optional::stream)`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/OptionalStreamRecipe.java"
    },
    {
      "className": "ReplaceStreamCollectWithToList",
      "displayName": "Replace `Stream.collect(Collectors.toUnmodifiableList())` with `Stream.toList()`",
      "description": "Replace `Stream.collect(Collectors.toUnmodifiableList())` with Java 16+ `Stream.toList()`. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/ReplaceStreamCollectWithToList.java"
    },
    {
      "className": "UseEnumSetOf",
      "displayName": "Prefer `EnumSet of(..)`",
      "description": "Prefer `EnumSet of(..)` instead of using `Set of(..)` when the arguments are enums in Java 5 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/UseEnumSetOf.java"
    },
    {
      "className": "OptionalNotEmptyToIsPresent",
      "displayName": "Prefer `Optional.isPresent()`",
      "description": "Prefer `Optional.isPresent()` instead of using `!Optional.isEmpty()` in Java 11 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/OptionalNotEmptyToIsPresent.java"
    },
    {
      "className": "MigrateCollectionsUnmodifiableList",
      "displayName": "Prefer `List.of(..)`",
      "description": "Prefer `List.Of(..)` instead of using `unmodifiableList(java.util.Arrays asList(<args>))` in Java 9 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/MigrateCollectionsUnmodifiableList.java"
    },
    {
      "className": "MigrateCollectionsSingletonSet",
      "displayName": "Prefer `Set.of(..)`",
      "description": "Prefer `Set.Of(..)` instead of using `Collections.singleton()` in Java 9 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/MigrateCollectionsSingletonSet.java"
    },
    {
      "className": "ListFirstAndLast",
      "displayName": "Replace `List.get(int)`, `add(int, Object)`, and `remove(int)` with `SequencedCollection` `*First` and `*Last` methods",
      "description": "Replace `list.get(0)` with `list.getFirst()`, `list.get(list.size() - 1)` with `list.getLast()`, and similar for `add(int, E)` and `remove(int)`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/ListFirstAndLast.java"
    },
    {
      "className": "MigrateCollectionsSingletonMap",
      "displayName": "Prefer `Map.of(..)`",
      "description": "Prefer `Map.of(..)` instead of using `Collections.singletonMap()` in Java 9 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/MigrateCollectionsSingletonMap.java"
    },
    {
      "className": "RemoveFinalizerFromZip",
      "displayName": "Remove invocations of deprecated invocations from Deflater, Inflater, ZipFile ",
      "description": "Remove invocations of finalize() deprecated invocations from Deflater, Inflater, ZipFile.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/RemoveFinalizerFromZip.java"
    },
    {
      "className": "MigrateStringReaderToReaderOf",
      "displayName": "Use `Reader.of(CharSequence)` for non-synchronized readers",
      "description": "Migrate `new StringReader(String)` to `Reader.of(CharSequence)` in Java 25+. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/MigrateStringReaderToReaderOf.java"
    },
    {
      "className": "OptionalNotPresentToIsEmpty",
      "displayName": "Prefer `Optional.isEmpty()`",
      "description": "Prefer `Optional.isEmpty()` instead of using `!Optional.isPresent()` in Java 11 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/OptionalNotPresentToIsEmpty.java"
    },
    {
      "className": "MigrateCollectionsSingletonList",
      "displayName": "Prefer `List.of(..)`",
      "description": "Prefer `List.of(..)` instead of using `Collections.singletonList()` in Java 9 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/MigrateCollectionsSingletonList.java"
    },
    {
      "className": "StreamFindFirst",
      "displayName": "Use `getFirst()` instead of `stream().findFirst().orElseThrow()`",
      "description": "For SequencedCollections, use `collection.getFirst()` instead of `collection.stream().findFirst().orElseThrow()`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/StreamFindFirst.java"
    },
    {
      "className": "IteratorNext",
      "displayName": "Replace `iterator().next()` with `getFirst()`",
      "description": "Replace `SequencedCollection.iterator().next()` with `getFirst()`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/IteratorNext.java"
    },
    {
      "className": "UseMapOf",
      "displayName": "Prefer `Map.of(..)`",
      "description": "Prefer `Map.of(..)` instead of using `java.util.Map#put(..)` in Java 10 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/util/UseMapOf.java"
    },
    {
      "className": "NoGuavaSetsNewConcurrentHashSet",
      "displayName": "Prefer `new ConcurrentHashMap<>()`",
      "description": "Prefer the Java standard library over third-party usage of Guava in simple cases like this.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaSetsNewConcurrentHashSet.java"
    },
    {
      "className": "PreferJavaStringJoin",
      "displayName": "Prefer `String#join()` over Guava `Joiner#join()`",
      "description": "Replaces supported calls to `com.google.common.base.Joiner#join()` with `java.lang.String#join()`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/PreferJavaStringJoin.java"
    },
    {
      "className": "NoGuavaListsNewCopyOnWriteArrayList",
      "displayName": "Prefer `new CopyOnWriteArrayList<>()`",
      "description": "Prefer the Java standard library over third-party usage of Guava in simple cases like this.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaListsNewCopyOnWriteArrayList.java"
    },
    {
      "className": "PreferJavaUtilOptionalOrSupplier",
      "displayName": "Prefer `java.util.Optional#or(Supplier<T extends java.util.Optional<T>>)`",
      "description": "Prefer `java.util.Optional#or(Supplier<T extends java.util.Optional<T>>)` over `com.google.common.base.Optional#or(com.google.common.base.Optional).",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/PreferJavaUtilOptionalOrSupplier.java"
    },
    {
      "className": "PreferJavaUtilOptionalOrElseNull",
      "displayName": "Prefer `java.util.Optional#orElse(null)` over `com.google.common.base.Optional#orNull()`",
      "description": "Replaces `com.google.common.base.Optional#orNull()` with `java.util.Optional#orElse(null)`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/PreferJavaUtilOptionalOrElseNull.java"
    },
    {
      "className": "NoGuavaAtomicsNewReference",
      "displayName": "Prefer `new AtomicReference<>()`",
      "description": "Prefer the Java standard library over third-party usage of Guava in simple cases like this.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaAtomicsNewReference.java"
    },
    {
      "className": "NoGuavaListsNewLinkedList",
      "displayName": "Prefer `new LinkedList<>()`",
      "description": "Prefer the Java standard library over third-party usage of Guava in simple cases like this.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaListsNewLinkedList.java"
    },
    {
      "className": "NoGuavaOptionalFromJavaUtil",
      "displayName": "Replace `com.google.common.base.Optional#fromJavaUtil(java.util.Optional)` with argument",
      "description": "Replaces `com.google.common.base.Optional#fromJavaUtil(java.util.Optional)` with argument.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaOptionalFromJavaUtil.java"
    },
    {
      "className": "NoGuavaSetsNewLinkedHashSet",
      "displayName": "Prefer `new LinkedHashSet<>()`",
      "description": "Prefer the Java standard library over third-party usage of Guava in simple cases like this.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaSetsNewLinkedHashSet.java"
    },
    {
      "className": "NoMapsAndSetsWithExpectedSize",
      "displayName": "Prefer JDK methods for Maps and Sets of an expected size",
      "description": "Prefer Java 19+ methods to create Maps and Sets of an expected size instead of using Guava methods.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoMapsAndSetsWithExpectedSize.java"
    },
    {
      "className": "AbstractNoGuavaImmutableOf",
      "displayName": "Prefer `",
      "description": "Replaces `",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/AbstractNoGuavaImmutableOf.java"
    },
    {
      "className": "NoGuavaSetsNewHashSet",
      "displayName": "Prefer `new HashSet<>()`",
      "description": "Prefer the Java standard library over third-party usage of Guava in simple cases like this.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaSetsNewHashSet.java"
    },
    {
      "className": "NoGuavaPrimitiveAsList",
      "displayName": "Prefer `Arrays.asList(..)` over Guava primitives",
      "description": "Migrate from Guava `com.google.common.primitives.* asList(..)` to `Arrays.asList(..)`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaPrimitiveAsList.java"
    },
    {
      "className": "NoGuavaListsNewArrayList",
      "displayName": "Prefer `new ArrayList<>()`",
      "description": "Prefer the Java standard library over third-party usage of Guava in simple cases like this.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaListsNewArrayList.java"
    },
    {
      "className": "NoGuavaMapsNewHashMap",
      "displayName": "Prefer `new HashMap<>()`",
      "description": "Prefer the Java standard library over third-party usage of Guava in simple cases like this.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaMapsNewHashMap.java"
    },
    {
      "className": "NoGuavaCreateTempDir",
      "displayName": "Prefer `Files#createTempDirectory()`",
      "description": "Replaces Guava `Files#createTempDir()` with Java `Files#createTempDirectory(..)`. Transformations are limited to scopes throwing or catching `java.io.IOException`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaCreateTempDir.java"
    },
    {
      "className": "NoGuavaDirectExecutor",
      "displayName": "Prefer `Runnable::run`",
      "description": "`Executor` is a SAM-compatible interface, so `Runnable::run` is just as succinct as `MoreExecutors.directExecutor()` but without the third-party library requirement.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaDirectExecutor.java"
    },
    {
      "className": "NoGuavaOptionalToJavaUtil",
      "displayName": "Remove `com.google.common.base.Optional#toJavaUtil()`",
      "description": "Remove calls to `com.google.common.base.Optional#toJavaUtil()`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaOptionalToJavaUtil.java"
    },
    {
      "className": "NoGuavaMapsNewLinkedHashMap",
      "displayName": "Prefer `new LinkedHashMap<>()`",
      "description": "Prefer the Java standard library over third-party usage of Guava in simple cases like this.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaMapsNewLinkedHashMap.java"
    },
    {
      "className": "NoGuavaMapsNewTreeMap",
      "displayName": "Prefer `new TreeMap<>()`",
      "description": "Prefer the Java standard library over third-party usage of Guava in simple cases like this.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/guava/NoGuavaMapsNewTreeMap.java"
    },
    {
      "className": "UseMavenCompilerPluginReleaseConfiguration",
      "displayName": "Use Maven compiler plugin release configuration",
      "description": "Replaces any explicit `source` or `target` configuration (if present) on the `maven-compiler-plugin` with ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/maven/UseMavenCompilerPluginReleaseConfiguration.java"
    },
    {
      "className": "UpdateMavenProjectPropertyJavaVersion",
      "displayName": "Update Maven Java project properties",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/maven/UpdateMavenProjectPropertyJavaVersion.java"
    },
    {
      "className": "ReplaceFileInOrOutputStreamFinalizeWithClose",
      "displayName": "Replace invocations of `finalize()` on `FileInputStream` and `FileOutputStream` with `close()`",
      "description": "Replace invocations of the deprecated `finalize()` method on `FileInputStream` and `FileOutputStream` with `close()`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/io/ReplaceFileInOrOutputStreamFinalizeWithClose.java"
    },
    {
      "className": "FindJavaVersion",
      "displayName": "Find Java versions in use",
      "description": "Finds Java versions in use.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/search/FindJavaVersion.java"
    },
    {
      "className": "PlanJavaMigration",
      "displayName": "Plan a Java version migration",
      "description": "Study the set of Java versions and associated tools in ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/search/PlanJavaMigration.java"
    },
    {
      "className": "FindDtoOverfetching",
      "displayName": "Find methods that only use one DTO data element",
      "description": "Find methods that have 'opportunities' for improvement.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/search/FindDtoOverfetching.java"
    },
    {
      "className": "FindDataUsedOnDto",
      "displayName": "Find data used on DTOs",
      "description": "Find data elements used on DTOs. This is useful to provide ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/search/FindDataUsedOnDto.java"
    },
    {
      "className": "FindInternalJavaxApis",
      "displayName": "Find uses of internal javax APIs",
      "description": "The libraries that define these APIs will have to be migrated before any of the repositories that use them.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/search/FindInternalJavaxApis.java"
    },
    {
      "className": "AboutJavaVersion",
      "displayName": "Find which Java version is in use",
      "description": "A diagnostic for studying the distribution of Java language version levels ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/search/AboutJavaVersion.java"
    },
    {
      "className": "ApplicationPathWildcardNoLongerAccepted",
      "displayName": "Remove trailing slash from `jakarta.ws.rs.ApplicationPath` values",
      "description": "Remove trailing `/*` from `jakarta.ws.rs.ApplicationPath` values.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/jakarta/ApplicationPathWildcardNoLongerAccepted.java"
    },
    {
      "className": "RemoveBeanIsNullable",
      "displayName": "Remove `Bean.isNullable()`",
      "description": "`Bean.isNullable()` has been removed in CDI 4.0.0, and now always returns `false`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/jakarta/RemoveBeanIsNullable.java"
    },
    {
      "className": "UpdateAddAnnotatedTypes",
      "displayName": "Replace `BeforeBeanDiscovery.addAnnotatedType(AnnotatedType)` with `addAnnotatedType(AnnotatedType, String)`",
      "description": "`BeforeBeanDiscovery.addAnnotatedType(AnnotatedType)` is deprecated in CDI 1.1. It is Replaced by `BeforeBeanDiscovery.addAnnotatedType(AnnotatedType, String)`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/jakarta/UpdateAddAnnotatedTypes.java"
    },
    {
      "className": "UpdateGetRealPath",
      "displayName": "Updates `getRealPath()` to call `getContext()` followed by `getRealPath()`",
      "description": "Updates `getRealPath()` for `jakarta.servlet.ServletRequest` and `jakarta.servlet.ServletRequestWrapper` to use `ServletContext.getRealPath(String)`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/jakarta/UpdateGetRealPath.java"
    },
    {
      "className": "UpdateBeanManagerMethods",
      "displayName": "Update `fireEvent()` and `createInjectionTarget()` calls",
      "description": "Updates `BeanManager.fireEvent()` or `BeanManager.createInjectionTarget()`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/jakarta/UpdateBeanManagerMethods.java"
    },
    {
      "className": "UpdateAnnotationAttributeJavaxToJakarta",
      "displayName": "Update annotation attributes using `javax` to `jakarta`",
      "description": "Replace `javax` with `jakarta` in annotation attributes for matching annotation signatures.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/jakarta/UpdateAnnotationAttributeJavaxToJakarta.java"
    },
    {
      "className": "UpdateManagedBeanToNamed",
      "displayName": "Update Faces `@ManagedBean` to use CDI `@Named`",
      "description": "Faces ManagedBean was deprecated in JSF 2.3 (EE8) and removed in Jakarta Faces 4.0 (EE10). ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/jakarta/UpdateManagedBeanToNamed.java"
    },
    {
      "className": "HasNoJakartaAnnotations",
      "displayName": "Project has no Jakarta annotations",
      "description": "Mark all source as found per `JavaProject` where no Jakarta annotations are found. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/jakarta/HasNoJakartaAnnotations.java"
    },
    {
      "className": "IfElseIfConstructToSwitch",
      "displayName": "If-else-if-else to switch",
      "description": "Replace if-else-if-else with switch statements. In order to be replaced with a switch, ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/IfElseIfConstructToSwitch.java"
    },
    {
      "className": "MigrateClassLoaderDefineClass",
      "displayName": "Use `ClassLoader#defineClass(String, byte[], int, int)`",
      "description": "Use `ClassLoader#defineClass(String, byte[], int, int)` instead of the deprecated `ClassLoader#defineClass(byte[], int, int)` in Java 1.1 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/MigrateClassLoaderDefineClass.java"
    },
    {
      "className": "ReplaceUnusedVariablesWithUnderscore",
      "displayName": "Replace unused variables with underscore",
      "description": "Replace unused variable declarations with underscore (_) for Java 22+. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/ReplaceUnusedVariablesWithUnderscore.java"
    },
    {
      "className": "NullCheckAsSwitchCase",
      "displayName": "Add null check to existing switch cases",
      "description": "In later Java 21+, null checks are valid in switch cases. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/NullCheckAsSwitchCase.java"
    },
    {
      "className": "RefineSwitchCases",
      "displayName": "Use switch cases refinement when possible",
      "description": "Use guarded switch case labels and guards if all the statements in the switch block do if/else if/else on the guarded label.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/RefineSwitchCases.java"
    },
    {
      "className": "MigrateSecurityManagerMulticast",
      "displayName": "Use `SecurityManager#checkMulticast(InetAddress)`",
      "description": "Use `SecurityManager#checkMulticast(InetAddress)` instead of the deprecated `SecurityManager#checkMulticast(InetAddress, byte)` in Java 1.4 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/MigrateSecurityManagerMulticast.java"
    },
    {
      "className": "SwitchCaseAssignmentsToSwitchExpression",
      "displayName": "Convert assigning Switch statements to Switch expressions",
      "description": "Switch statements for which each case is assigning a value to the same variable can be converted to a switch expression that returns the value of the variable. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/SwitchCaseAssignmentsToSwitchExpression.java"
    },
    {
      "className": "ExplicitRecordImport",
      "displayName": "Add explicit import for `Record` classes",
      "description": "Add explicit import for `Record` classes when upgrading past Java 14+, to avoid conflicts with `java.lang.Record`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/ExplicitRecordImport.java"
    },
    {
      "className": "SwitchCaseEnumGuardToLabel",
      "displayName": "Use switch cases labels for enums",
      "description": "Use switch case labels when a guard is checking equality with an enum.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/SwitchCaseEnumGuardToLabel.java"
    },
    {
      "className": "SwitchExpressionYieldToArrow",
      "displayName": "Convert switch expression yield to arrow",
      "description": "Convert switch expressions with colon cases and yield statements to arrow syntax. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/SwitchExpressionYieldToArrow.java"
    },
    {
      "className": "StringFormatted",
      "displayName": "Prefer `String.formatted(Object...)`",
      "description": "Prefer `String.formatted(Object...)` over `String.format(String, Object...)` in Java 17 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/StringFormatted.java"
    },
    {
      "className": "MigrateClassNewInstanceToGetDeclaredConstructorNewInstance",
      "displayName": "Use `Class#getDeclaredConstructor().newInstance()`",
      "description": "Use `Class#getDeclaredConstructor().newInstance()` instead of the deprecated `Class#newInstance()` in Java 9 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/MigrateClassNewInstanceToGetDeclaredConstructorNewInstance.java"
    },
    {
      "className": "ThreadStopUnsupported",
      "displayName": "Replace `Thread.resume()`, `Thread.stop()`, and `Thread.suspend()` with `throw new UnsupportedOperationException()`",
      "description": "`Thread.resume()`, `Thread.stop()`, and `Thread.suspend()` always throws a `new UnsupportedOperationException` in Java 21+. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/ThreadStopUnsupported.java"
    },
    {
      "className": "SwitchCaseReturnsToSwitchExpression",
      "displayName": "Convert switch cases where every case returns into a returned switch expression",
      "description": "Switch statements where each case returns a value can be converted to a switch expression that returns the value directly. ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/SwitchCaseReturnsToSwitchExpression.java"
    },
    {
      "className": "UseTextBlocks",
      "displayName": "Use text blocks",
      "description": "Text blocks are easier to read than concatenated strings.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/UseTextBlocks.java"
    },
    {
      "className": "MigrateProcessWaitForDuration",
      "displayName": "Use `Process#waitFor(Duration)`",
      "description": "Use `Process#waitFor(Duration)` instead of `Process#waitFor(long, TimeUnit)` in Java 25 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/MigrateProcessWaitForDuration.java"
    },
    {
      "className": "UseVarForGenericsConstructors",
      "displayName": "UseVarForGenericsConstructors",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/var/UseVarForGenericsConstructors.java"
    },
    {
      "className": "UseVarForObject",
      "displayName": "UseVarForObject",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/var/UseVarForObject.java"
    },
    {
      "className": "UseVarForGenericMethodInvocations",
      "displayName": "UseVarForGenericMethodInvocations",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/var/UseVarForGenericMethodInvocations.java"
    },
    {
      "className": "UseVarForPrimitive",
      "displayName": "UseVarForPrimitive",
      "description": "",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/lang/var/UseVarForPrimitive.java"
    },
    {
      "className": "AddTableGenerator",
      "displayName": "Attributes with automatically generated values require configuration",
      "description": "Adds missing `@TableGenerator` annotation and updates the `@GeneratedValue` annotation values when it uses automatically generated values.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/AddTableGenerator.java"
    },
    {
      "className": "AddJaxwsRuntime",
      "displayName": "Use the latest JAX-WS API and runtime for Jakarta EE 8",
      "description": "Update build files to use the latest JAX-WS runtime from Jakarta EE 8 to maintain compatibility with ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/AddJaxwsRuntime.java"
    },
    {
      "className": "HttpSessionInvalidate",
      "displayName": "Use HttpServletRequest `logout` method for programmatic security logout in Servlet 3.0",
      "description": "Do not rely on HttpSession `invalidate` method for programmatic security logout. Add the HttpServletRequest `logout` method which was introduced in Java EE 6 as part of the Servlet 3.0 specification.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/HttpSessionInvalidate.java"
    },
    {
      "className": "RemoveEmbeddableId",
      "displayName": "`@Embeddable` classes cannot have an `@Id` annotation when referenced by an `@EmbeddedId` annotation",
      "description": "According to the Java Persistence API (JPA) specification, if an entity defines an attribute with an ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/RemoveEmbeddableId.java"
    },
    {
      "className": "AddTransientAnnotationToEntity",
      "displayName": "Unannotated entity attributes require a Transient annotation",
      "description": "In OpenJPA, attributes that are themselves entity classes are not persisted by default. EclipseLink has ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/AddTransientAnnotationToEntity.java"
    },
    {
      "className": "RemoveTemporalAnnotation",
      "displayName": "Remove the `@Temporal` annotation for some `java.sql` attributes",
      "description": "OpenJPA persists the fields of attributes of type `java.sql.Date`, `java.sql.Time`, or `java.sql.Timestamp` ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/RemoveTemporalAnnotation.java"
    },
    {
      "className": "AddScopeToInjectedClass",
      "displayName": "Add scope annotation to injected classes",
      "description": "Finds member variables annotated with `@Inject' and applies `@Dependent` scope annotation to the variable's type.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/AddScopeToInjectedClass.java"
    },
    {
      "className": "AddJaxbRuntime",
      "displayName": "Use latest JAXB API and runtime for Jakarta EE 8",
      "description": "Update build files to use the latest JAXB runtime from Jakarta EE 8 to maintain compatibility with ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/AddJaxbRuntime.java"
    },
    {
      "className": "AddTransientAnnotationToCollections",
      "displayName": "Unannotated collection attributes require a Transient annotation",
      "description": "In OpenJPA, attributes that inherit from the `java.util.Collection<E>` interface are not a default ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/AddTransientAnnotationToCollections.java"
    },
    {
      "className": "AddTransientAnnotationToPrivateAccessor",
      "displayName": "Private accessor methods must have a `@Transient` annotation",
      "description": "According to the JPA 2.1 specification, when property access is used, the property accessor methods ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/AddTransientAnnotationToPrivateAccessor.java"
    },
    {
      "className": "AddDefaultConstructorToEntityClass",
      "displayName": "`@Entity` objects with constructors must also have a default constructor",
      "description": "When a Java Persistence API (JPA) entity class has a constructor with arguments, the class must also ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/AddDefaultConstructorToEntityClass.java"
    },
    {
      "className": "AddColumnAnnotation",
      "displayName": "`@ElementCollection` annotations must be accompanied by a defined `@Column` annotation",
      "description": "When an attribute is annotated with `@ElementCollection`, a separate table is created for the attribute that includes the attribute \\n",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/AddColumnAnnotation.java"
    },
    {
      "className": "UseJoinColumnForMapping",
      "displayName": "`@JoinColumn` annotations must be used with relationship mappings",
      "description": "In OpenJPA, when a relationship attribute has either a `@OneToOne` or a `@ManyToOne` annotation with a ",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/javax/UseJoinColumnForMapping.java"
    },
    {
      "className": "MigrateLogRecordSetMillisToSetInstant",
      "displayName": "Use `LogRecord#setInstant(Instant)`",
      "description": "Use `LogRecord#setInstant(Instant)` instead of the deprecated `LogRecord#setMillis(long)` in Java 9 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/logging/MigrateLogRecordSetMillisToSetInstant.java"
    },
    {
      "className": "MigrateGetLoggingMXBeanToGetPlatformMXBean",
      "displayName": "Use `ManagementFactory#getPlatformMXBean(PlatformLoggingMXBean.class)`",
      "description": "Use `ManagementFactory#getPlatformMXBean(PlatformLoggingMXBean.class)` instead of the deprecated `LogManager#getLoggingMXBean()` in Java 9 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/logging/MigrateGetLoggingMXBeanToGetPlatformMXBean.java"
    },
    {
      "className": "MigrateLoggerGlobalToGetGlobal",
      "displayName": "Use `Logger#getGlobal()`",
      "description": "The preferred way to get the global logger object is via the call `Logger#getGlobal()` over direct field access to `java.util.logging.Logger.global`.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/logging/MigrateLoggerGlobalToGetGlobal.java"
    },
    {
      "className": "MigrateLoggerLogrbToUseResourceBundle",
      "displayName": "Use `Logger#logrb(.., ResourceBundle bundleName, ..)`",
      "description": "Use `Logger#logrb(.., ResourceBundle bundleName, ..)` instead of the deprecated `java.util.logging.Logger#logrb(.., String bundleName, ..)` in Java 8 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/logging/MigrateLoggerLogrbToUseResourceBundle.java"
    },
    {
      "className": "MigrateDriverManagerSetLogStream",
      "displayName": "Use `DriverManager#setLogWriter(java.io.PrintWriter)`",
      "description": "Use `DriverManager#setLogWriter(java.io.PrintWriter)` instead of the deprecated `DriverManager#setLogStream(java.io.PrintStream)` in Java 1.2 or higher.",
      "recipeType": "Migration",
      "repository": "rewrite-migrate-java",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-migrate-java/src/main/java/org/openrewrite/java/migrate/sql/MigrateDriverManagerSetLogStream.java"
    },
    {
      "className": "UnnecessaryCatch",
      "displayName": "Remove catch for a checked exception if the try block does not throw that exception",
      "description": "A refactoring operation may result in a checked exception that is no longer thrown from a `try` block. This recipe will find and remove unnecessary catch blocks.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UnnecessaryCatch.java"
    },
    {
      "className": "NoToStringOnStringType",
      "displayName": "Unnecessary `String#toString`",
      "description": "Remove unnecessary `String#toString` invocations on objects which are already a string.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NoToStringOnStringType.java"
    },
    {
      "className": "RenamePrivateFieldsToCamelCase",
      "displayName": "Reformat private field names to camelCase",
      "description": "Reformat private field names to camelCase to comply with Java naming convention. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RenamePrivateFieldsToCamelCase.java"
    },
    {
      "className": "ForLoopIncrementInUpdate",
      "displayName": "`for` loop counters incremented in update",
      "description": "The increment should be moved to the loop's increment clause if possible.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ForLoopIncrementInUpdate.java"
    },
    {
      "className": "IsEmptyCallOnCollections",
      "displayName": "Use `Collection#isEmpty()` instead of comparing `size()`",
      "description": "Also check for _not_ `isEmpty()` when testing for not equal to zero size.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/IsEmptyCallOnCollections.java"
    },
    {
      "className": "RemoveEmptyJavaDocParameters",
      "displayName": "Remove JavaDoc `@param`, `@return`, and `@throws` with no description",
      "description": "Removes `@param`, `@return`, and `@throws` with no description from JavaDocs.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveEmptyJavaDocParameters.java"
    },
    {
      "className": "UnnecessaryParentheses",
      "displayName": "Remove unnecessary parentheses",
      "description": "Removes unnecessary parentheses from code where extra parentheses pairs are redundant.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UnnecessaryParentheses.java"
    },
    {
      "className": "UseObjectNotifyAll",
      "displayName": "Replaces `Object.notify()` with `Object.notifyAll()`",
      "description": "`Object.notifyAll()` and `Object.notify()` both wake up sleeping threads, but `Object.notify()` only rouses one while `Object.notifyAll()` rouses all of them. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseObjectNotifyAll.java"
    },
    {
      "className": "RemoveCallsToObjectFinalize",
      "displayName": "Remove `Object.finalize()` invocations",
      "description": "Remove calls to `Object.finalize()`. This method is called during garbage collection and calling it manually is misleading.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveCallsToObjectFinalize.java"
    },
    {
      "className": "RemoveJavaDocAuthorTag",
      "displayName": "Remove author tags from JavaDocs",
      "description": "Removes author tags from JavaDocs to reduce code maintenance.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveJavaDocAuthorTag.java"
    },
    {
      "className": "AnnotateNullableMethods",
      "displayName": "Annotate methods which may return `null` with `@Nullable`",
      "description": "Add `@Nullable` to non-private methods that may return `null`. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/AnnotateNullableMethods.java"
    },
    {
      "className": "UnwrapRepeatableAnnotations",
      "displayName": "Unwrap `@Repeatable` annotations",
      "description": "Java 8 introduced the concept of `@Repeatable` annotations, ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UnwrapRepeatableAnnotations.java"
    },
    {
      "className": "HideUtilityClassConstructor",
      "displayName": "Hide utility class constructor",
      "description": "Ensures utility classes (classes containing only static methods or fields in their API) do not have a public constructor.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/HideUtilityClassConstructor.java"
    },
    {
      "className": "NoFinalizedLocalVariables",
      "displayName": "Don't use final on local variables",
      "description": "Remove the `final` modifier keyword from local variables regardless of whether they are used within a local class or an anonymous class.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NoFinalizedLocalVariables.java"
    },
    {
      "className": "ObjectFinalizeCallsSuper",
      "displayName": "`finalize()` calls super",
      "description": "Overrides of `Object#finalize()` should call super.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ObjectFinalizeCallsSuper.java"
    },
    {
      "className": "UseStandardCharset",
      "displayName": "Use `StandardCharset` constants",
      "description": "Replaces `Charset.forName(java.lang.String)` with the equivalent `StandardCharset` constant.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseStandardCharset.java"
    },
    {
      "className": "FallThrough",
      "displayName": "Fall through",
      "description": "Checks for fall-through in switch statements, adding `break` statements in locations where a case contains Java code but does not have a `break`, `return`, `throw`, or `continue` statement.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/FallThrough.java"
    },
    {
      "className": "RemoveUnusedPrivateFields",
      "displayName": "Remove unused private fields",
      "description": "If a private field is declared but not used in the program, it can be considered dead code and should therefore be removed.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveUnusedPrivateFields.java"
    },
    {
      "className": "ExplicitLambdaArgumentTypes",
      "displayName": "Use explicit types on lambda arguments",
      "description": "Adds explicit types on lambda arguments, which are otherwise optional. This can make the code clearer and easier to read. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ExplicitLambdaArgumentTypes.java"
    },
    {
      "className": "NewStringBuilderBufferWithCharArgument",
      "displayName": "Change `StringBuilder` and `StringBuffer` character constructor argument to `String`",
      "description": "Instantiating a `StringBuilder` or a `StringBuffer` with a `Character` results in the `int` representation of the character being used for the initial size.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NewStringBuilderBufferWithCharArgument.java"
    },
    {
      "className": "CatchClauseOnlyRethrows",
      "displayName": "Catch clause should do more than just rethrow",
      "description": "A `catch` clause that only rethrows the caught exception is unnecessary. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/CatchClauseOnlyRethrows.java"
    },
    {
      "className": "SortedSetStreamToLinkedHashSet",
      "displayName": "Sorted set stream should be collected to LinkedHashSet",
      "description": "Converts `set.stream().sorted().collect(Collectors.toSet())` to `set.stream().sorted().collect(LinkedHashSet::new)`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/SortedSetStreamToLinkedHashSet.java"
    },
    {
      "className": "RemoveToStringCallsFromArrayInstances",
      "displayName": "Remove `toString()` calls on arrays",
      "description": "The result from `toString()` calls on arrays is largely useless. The output does not actually reflect ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveToStringCallsFromArrayInstances.java"
    },
    {
      "className": "TernaryOperatorsShouldNotBeNested",
      "displayName": "Ternary operators should not be nested",
      "description": "Nested ternary operators can be hard to read quickly. Prefer simpler constructs for improved readability. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/TernaryOperatorsShouldNotBeNested.java"
    },
    {
      "className": "ReplaceValidateNotNullHavingVarargsWithObjectsRequireNonNull",
      "displayName": "Replace `org.apache.commons.lang3.Validate#notNull` with `Objects#requireNonNull`",
      "description": "Replace `org.apache.commons.lang3.Validate.notNull(Object, String, Object[])` with `Objects.requireNonNull(Object, String)`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceValidateNotNullHavingVarargsWithObjectsRequireNonNull.java"
    },
    {
      "className": "ReferentialEqualityToObjectEquals",
      "displayName": "Replace referential equality operators with Object equals method invocations when the operands both override `Object.equals(Object obj)`",
      "description": "Using `==` or `!=` compares object references, not the equality of two objects. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReferentialEqualityToObjectEquals.java"
    },
    {
      "className": "TypecastParenPad",
      "displayName": "Typecast parenthesis padding",
      "description": "Fixes whitespace padding between a typecast type identifier and the enclosing left and right parentheses. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/TypecastParenPad.java"
    },
    {
      "className": "StaticMethodNotFinal",
      "displayName": "Static methods need not be final",
      "description": "Static methods do not need to be declared final because they cannot be overridden.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/StaticMethodNotFinal.java"
    },
    {
      "className": "EqualsToContentEquals",
      "displayName": "Use `String.contentEquals(CharSequence)` instead of `String.equals(CharSequence.toString())`",
      "description": "Use `String.contentEquals(CharSequence)` instead of `String.equals(CharSequence.toString())`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/EqualsToContentEquals.java"
    },
    {
      "className": "MinimumSwitchCases",
      "displayName": "`switch` statements should have at least 3 `case` clauses",
      "description": "`switch` statements are useful when many code paths branch depending on the value of a single expression. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/MinimumSwitchCases.java"
    },
    {
      "className": "UseForEachRemoveInsteadOfSetRemoveAll",
      "displayName": "Replace `java.util.Set#removeAll(java.util.Collection)` with `java.util.Collection#forEach(Set::remove)`",
      "description": "Using `java.util.Collection#forEach(Set::remove)` rather than `java.util.Set#removeAll(java.util.Collection)` may improve performance due to a possible O(n^2) complexity.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseForEachRemoveInsteadOfSetRemoveAll.java"
    },
    {
      "className": "RemoveRedundantNullCheckBeforeLiteralEquals",
      "displayName": "Remove redundant null checks before literal equals",
      "description": "Removes redundant null checks before `equals()` comparisons when the receiver is a literal string, ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveRedundantNullCheckBeforeLiteralEquals.java"
    },
    {
      "className": "BigDecimalRoundingConstantsToEnums",
      "displayName": "`BigDecimal` rounding constants to `RoundingMode` enums",
      "description": "Convert `BigDecimal` rounding constants to the equivalent `RoundingMode` enum.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/BigDecimalRoundingConstantsToEnums.java"
    },
    {
      "className": "RemoveUnusedPrivateMethods",
      "displayName": "Remove unused private methods",
      "description": "`private` methods that are never executed are dead code and should be removed.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveUnusedPrivateMethods.java"
    },
    {
      "className": "RenameLocalVariablesToCamelCase",
      "displayName": "Reformat local variable names to camelCase",
      "description": "Reformat local variable and method parameter names to camelCase to comply with Java naming convention. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RenameLocalVariablesToCamelCase.java"
    },
    {
      "className": "ReplaceLambdaWithMethodReference",
      "displayName": "Use method references in lambda",
      "description": "Replaces the single statement lambdas `o -> o instanceOf X`, `o -> (A) o`, `o -> System.out.println(o)`, `o -> o != null`, `o -> o == null` with the equivalent method reference.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceLambdaWithMethodReference.java"
    },
    {
      "className": "MaskCreditCardNumbers",
      "displayName": "Mask credit card numbers",
      "description": "When encountering string literals which appear to be credit card numbers, ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/MaskCreditCardNumbers.java"
    },
    {
      "className": "ReplaceRedundantFormatWithPrintf",
      "displayName": "Replace redundant String format invocations that are wrapped with PrintStream operations",
      "description": "Replaces `PrintStream.print(String.format(format, ...args))` with `PrintStream.printf(format, ...args)` (and for `println`, appends a newline to the format string).",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceRedundantFormatWithPrintf.java"
    },
    {
      "className": "UseJavaStyleArrayDeclarations",
      "displayName": "No C-style array declarations",
      "description": "Change C-Style array declarations `int i[];` to `int[] i;`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseJavaStyleArrayDeclarations.java"
    },
    {
      "className": "CovariantEquals",
      "displayName": "Covariant equals",
      "description": "Checks that classes and records which define a covariant `equals()` method also override method `equals(Object)`. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/CovariantEquals.java"
    },
    {
      "className": "PrimitiveWrapperClassConstructorToValueOf",
      "displayName": "Use primitive wrapper `valueOf` method",
      "description": "The constructor of all primitive types has been deprecated in favor of using the static factory method `valueOf` available for each of the primitive type wrappers.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/PrimitiveWrapperClassConstructorToValueOf.java"
    },
    {
      "className": "OperatorWrap",
      "displayName": "Operator wrapping",
      "description": "Fixes line wrapping policies on operators.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/OperatorWrap.java"
    },
    {
      "className": "PreferSystemGetPropertyOverGetenv",
      "displayName": "Prefer `System.getProperty(\\",
      "description": "Replaces `System.getenv(\\",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/PreferSystemGetPropertyOverGetenv.java"
    },
    {
      "className": "RemoveRedundantTypeCast",
      "displayName": "Remove redundant casts",
      "description": "Removes unnecessary type casts. Does not currently check casts in lambdas and class constructors.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveRedundantTypeCast.java"
    },
    {
      "className": "UnwrapElseAfterReturn",
      "displayName": "Unwrap else block after return or throw statement",
      "description": "Unwraps the else block when the if block ends with a return or throw statement, ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UnwrapElseAfterReturn.java"
    },
    {
      "className": "SimplifyConstantIfBranchExecution",
      "displayName": "Simplify constant if branch execution",
      "description": "Checks for if expressions that are always `true` or `false` and simplifies them.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/SimplifyConstantIfBranchExecution.java"
    },
    {
      "className": "InlineVariable",
      "displayName": "Inline variable",
      "description": "Inline variables when they are immediately used to return or throw. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/InlineVariable.java"
    },
    {
      "className": "UseListSort",
      "displayName": "Replace invocations of `Collections#sort(List, Comparator)` with `List#sort(Comparator)`",
      "description": "The `java.util.Collections#sort(..)` implementation defers to the `java.util.List#sort(Comparator)`, replaced it with the `java.util.List#sort(Comparator)` implementation for better readability.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseListSort.java"
    },
    {
      "className": "AbstractClassPublicConstructor",
      "displayName": "Constructors of an `abstract` class should not be declared `public`",
      "description": "Constructors of `abstract` classes can only be called in constructors of their subclasses. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/AbstractClassPublicConstructor.java"
    },
    {
      "className": "AtomicPrimitiveEqualsUsesGet",
      "displayName": "Atomic Boolean, Integer, and Long equality checks compare their values",
      "description": "`AtomicBoolean#equals(Object)`, `AtomicInteger#equals(Object)` and `AtomicLong#equals(Object)` are only equal to their instance. This recipe converts `a.equals(b)` to `a.get() == b.get()`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/AtomicPrimitiveEqualsUsesGet.java"
    },
    {
      "className": "ReplaceStackWithDeque",
      "displayName": "Replace `java.util.Stack` with `java.util.Deque`",
      "description": "From the Javadoc of `Stack`:\\n",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceStackWithDeque.java"
    },
    {
      "className": "ReplaceDeprecatedRuntimeExecMethods",
      "displayName": "Replace deprecated `Runtime#exec()` methods",
      "description": "Replace `Runtime#exec(String)` methods to use `exec(String[])` instead because the former is deprecated ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceDeprecatedRuntimeExecMethods.java"
    },
    {
      "className": "RemoveUnneededAssertion",
      "displayName": "Remove unneeded assertions",
      "description": "Remove unneeded assertions like `assert true`, `assertTrue(true)`, or `assertFalse(false)`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveUnneededAssertion.java"
    },
    {
      "className": "ReplaceTextBlockWithString",
      "displayName": "Replace text block with regular string",
      "description": "Replace text block with a regular multi-line string.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceTextBlockWithString.java"
    },
    {
      "className": "SimplifyCompoundStatement",
      "displayName": "Simplify compound statement",
      "description": "Fixes or removes useless compound statements. For example, removing `b &= true`, and replacing `b &= false` with `b = false`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/SimplifyCompoundStatement.java"
    },
    {
      "className": "LambdaBlockToExpression",
      "displayName": "Simplify lambda blocks to expressions",
      "description": "Single-line statement lambdas returning a value can be replaced with expression lambdas.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/LambdaBlockToExpression.java"
    },
    {
      "className": "AddSerialAnnotationToSerialVersionUID",
      "displayName": "Add `@Serial` annotation to `serialVersionUID`",
      "description": "Annotate any `serialVersionUID` fields with `@Serial` to indicate it's part of the serialization mechanism.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/AddSerialAnnotationToSerialVersionUID.java"
    },
    {
      "className": "RemoveCallsToSystemGc",
      "displayName": "Remove garbage collection invocations",
      "description": "Removes calls to `System.gc()` and `Runtime.gc()`. When to invoke garbage collection is best left to the JVM.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveCallsToSystemGc.java"
    },
    {
      "className": "MethodNameCasing",
      "displayName": "Standardize method name casing",
      "description": "Fixes method names that do not follow standard naming conventions. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/MethodNameCasing.java"
    },
    {
      "className": "IndexOfReplaceableByContains",
      "displayName": "`indexOf()` replaceable by `contains()`",
      "description": "Checking if a value is included in a `String` or `List` using `indexOf(value)>-1` or `indexOf(value)>=0` can be replaced with `contains(value)`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/IndexOfReplaceableByContains.java"
    },
    {
      "className": "ExternalizableHasNoArgsConstructor",
      "displayName": "`Externalizable` classes have no-arguments constructor",
      "description": "`Externalizable` classes handle both serialization and deserialization and must have a no-args constructor for the deserialization process.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ExternalizableHasNoArgsConstructor.java"
    },
    {
      "className": "UseStringReplace",
      "displayName": "Use `String::replace()` when first parameter is not a real regular expression",
      "description": "When `String::replaceAll` is used, the first argument should be a real regular expression. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseStringReplace.java"
    },
    {
      "className": "NoDoubleBraceInitialization",
      "displayName": "No double brace initialization",
      "description": "Replace `List`, `Map`, and `Set` double brace initialization with an initialization block.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NoDoubleBraceInitialization.java"
    },
    {
      "className": "MissingOverrideAnnotation",
      "displayName": "Add missing `@Override` to overriding and implementing methods",
      "description": "Adds `@Override` to methods overriding superclass methods or implementing interface methods. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/MissingOverrideAnnotation.java"
    },
    {
      "className": "LowercasePackage",
      "displayName": "Rename packages to lowercase",
      "description": "By convention all Java package names should contain only lowercase letters, numbers, and dashes. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/LowercasePackage.java"
    },
    {
      "className": "NullableOnMethodReturnType",
      "displayName": "Move `@Nullable` method annotations to the return type",
      "description": "This is the way the cool kids do it.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NullableOnMethodReturnType.java"
    },
    {
      "className": "UnnecessaryThrows",
      "displayName": "Unnecessary throws",
      "description": "Remove unnecessary `throws` declarations. This recipe will only remove unused, checked exceptions if:\\n",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UnnecessaryThrows.java"
    },
    {
      "className": "ExplicitCharsetOnStringGetBytes",
      "displayName": "Set charset encoding explicitly when calling `String#getBytes`",
      "description": "This makes the behavior of the code platform neutral. It will not override any ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ExplicitCharsetOnStringGetBytes.java"
    },
    {
      "className": "DeclarationSiteTypeVariance",
      "displayName": "Properly use declaration-site type variance",
      "description": "Currently, Java requires use-site type variance, so if someone has `Function<IN, OUT>` method parameter, it should rather be `Function<? super IN, ? extends OUT>`. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/DeclarationSiteTypeVariance.java"
    },
    {
      "className": "SimplifyBooleanExpression",
      "displayName": "Simplify boolean expression",
      "description": "Checks for overly complicated boolean expressions, such as `if (b == true)`, `b || true`, `!false`, etc.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/SimplifyBooleanExpression.java"
    },
    {
      "className": "IndexOfShouldNotCompareGreaterThanZero",
      "displayName": "`indexOf` should not compare greater than zero",
      "description": "Replaces `String#indexOf(String) > 0` and `List#indexOf(Object) > 0` with `>=1`. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/IndexOfShouldNotCompareGreaterThanZero.java"
    },
    {
      "className": "WhileInsteadOfFor",
      "displayName": "Prefer `while` over `for` loops",
      "description": "When only the condition expression is defined in a for loop, and the initialization and increment expressions are missing, a while loop should be used instead to increase readability.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/WhileInsteadOfFor.java"
    },
    {
      "className": "UnnecessaryPrimitiveAnnotations",
      "displayName": "Remove `@Nullable` and `@CheckForNull` annotations from primitives",
      "description": "Primitives can't be null anyway, so these annotations are not useful in this context.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UnnecessaryPrimitiveAnnotations.java"
    },
    {
      "className": "StringLiteralEquality",
      "displayName": "Use `String.equals()` on `String` literals",
      "description": "`String.equals()` should be used when checking value equality on String literals. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/StringLiteralEquality.java"
    },
    {
      "className": "NoValueOfOnStringType",
      "displayName": "Unnecessary `String#valueOf(..)`",
      "description": "Replace unnecessary `String#valueOf(..)` method invocations with the argument directly. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NoValueOfOnStringType.java"
    },
    {
      "className": "UsePortableNewlines",
      "displayName": "Use %n instead of \\\\n in format strings",
      "description": "Format strings should use %n rather than \\\\n to produce platform-specific line separators.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UsePortableNewlines.java"
    },
    {
      "className": "UseCollectionInterfaces",
      "displayName": "Use `Collection` interfaces",
      "description": "Use `Deque`, `List`, `Map`, `ConcurrentMap`, `Queue`, and `Set` instead of implemented collections. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseCollectionInterfaces.java"
    },
    {
      "className": "RedundantFileCreation",
      "displayName": "Redundant file creation",
      "description": "Remove unnecessary intermediate creations of files.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RedundantFileCreation.java"
    },
    {
      "className": "UseSystemLineSeparator",
      "displayName": "Use `System.lineSeparator()`",
      "description": "Replace calls to `System.getProperty(\\",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseSystemLineSeparator.java"
    },
    {
      "className": "CustomImportOrder",
      "displayName": "Custom import order",
      "description": "Updates and reorders Java import declarations according to group and order settings compatible with the Checkstyle 'CustomImportOrder' check.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/CustomImportOrder.java"
    },
    {
      "className": "UnnecessaryExplicitTypeArguments",
      "displayName": "Unnecessary explicit type arguments",
      "description": "When explicit type arguments are inferable by the compiler, they may be removed.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UnnecessaryExplicitTypeArguments.java"
    },
    {
      "className": "BooleanChecksNotInverted",
      "displayName": "Boolean checks should not be inverted",
      "description": "Ensures that boolean checks are not unnecessarily inverted. Also fixes double negative boolean expressions.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/BooleanChecksNotInverted.java"
    },
    {
      "className": "SimplifyElseBranch",
      "displayName": "SimplifyElseBranch",
      "description": "",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/SimplifyElseBranch.java"
    },
    {
      "className": "InstanceOfPatternMatch",
      "displayName": "Changes code to use Java 17's `instanceof` pattern matching",
      "description": "Adds pattern variables to `instanceof` expressions wherever the same (side effect free) expression is referenced in a corresponding type cast expression within the flow scope of the `instanceof`. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/InstanceOfPatternMatch.java"
    },
    {
      "className": "IndexOfChecksShouldUseAStartPosition",
      "displayName": "Use `indexOf(String, int)`",
      "description": "Replaces `indexOf(String)` in binary operations if the compared value is an int and not less than 1.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/IndexOfChecksShouldUseAStartPosition.java"
    },
    {
      "className": "ReplaceDuplicateStringLiterals",
      "displayName": "Replace duplicate `String` literals",
      "description": "Replaces `String` literals with a length of 5 or greater repeated a minimum of 3 times. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceDuplicateStringLiterals.java"
    },
    {
      "className": "NestedEnumsAreNotStatic",
      "displayName": "Nested enums are not static",
      "description": "Remove static modifier from nested enum types since they are implicitly static.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NestedEnumsAreNotStatic.java"
    },
    {
      "className": "CollectionToArrayShouldHaveProperType",
      "displayName": "'Collection.toArray()' should be passed an array of the proper type",
      "description": "Using `Collection.toArray()` without parameters returns an `Object[]`, which requires casting. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/CollectionToArrayShouldHaveProperType.java"
    },
    {
      "className": "ExplicitInitialization",
      "displayName": "Explicit initialization",
      "description": "Checks if any class or object member is explicitly initialized to default for its type value:\\n",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ExplicitInitialization.java"
    },
    {
      "className": "NoPrimitiveWrappersForToStringOrCompareTo",
      "displayName": "No primitive wrappers for #toString() or #compareTo(..)",
      "description": "Primitive wrappers should not be instantiated only for `#toString()` or `#compareTo(..)` invocations.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NoPrimitiveWrappersForToStringOrCompareTo.java"
    },
    {
      "className": "ReplaceOptionalIsPresentWithIfPresent",
      "displayName": "Replace `Optional#isPresent()` with `Optional#ifPresent()`",
      "description": "Replace `Optional#isPresent()` with `Optional#ifPresent()`. Please note that this recipe is only suitable for if-blocks that lack an Else-block and have a single condition applied.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceOptionalIsPresentWithIfPresent.java"
    },
    {
      "className": "RemoveHashCodeCallsFromArrayInstances",
      "displayName": "`hashCode()` should not be called on array instances",
      "description": "Replace `hashCode()` calls on arrays with `Arrays.hashCode()` because the results from `hashCode()` ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveHashCodeCallsFromArrayInstances.java"
    },
    {
      "className": "CompareEnumsWithEqualityOperator",
      "displayName": "Enum values should be compared with \\",
      "description": "Replaces `Enum equals(java.lang.Object)` with `Enum == java.lang.Object`. An `!Enum equals(java.lang.Object)` will change to `!=`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/CompareEnumsWithEqualityOperator.java"
    },
    {
      "className": "ForLoopControlVariablePostfixOperators",
      "displayName": "`for` loop counters should use postfix operators",
      "description": "Replace `for` loop control variables using pre-increment (`++i`) or pre-decrement (`--i`) operators ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ForLoopControlVariablePostfixOperators.java"
    },
    {
      "className": "NeedBraces",
      "displayName": "Fix missing braces",
      "description": "Adds missing braces around code such as single-line `if`, `for`, `while`, and `do-while` block bodies.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NeedBraces.java"
    },
    {
      "className": "UseAsBuilder",
      "displayName": "Chain calls to builder methods",
      "description": "Chain calls to builder methods that are on separate lines into one chain of builder calls.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseAsBuilder.java"
    },
    {
      "className": "HiddenField",
      "displayName": "Hidden field",
      "description": "Refactor local variables or parameters which shadow a field defined in the same class.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/HiddenField.java"
    },
    {
      "className": "UnnecessaryReturnAsLastStatement",
      "displayName": "Unnecessary `return` as last statement in void method",
      "description": "Removes `return` from a `void` method if it's the last statement.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UnnecessaryReturnAsLastStatement.java"
    },
    {
      "className": "SimplifyBooleanReturn",
      "displayName": "Simplify boolean return",
      "description": "Simplifies Boolean expressions by removing redundancies. For example, `a && true` simplifies to `a`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/SimplifyBooleanReturn.java"
    },
    {
      "className": "PreferEqualityComparisonOverDifferenceCheck",
      "displayName": "Prefer direct comparison of numbers",
      "description": "Replace `a - b == 0` with `a == b`, `a - b != 0` with `a != b`, `a - b < 0` with `a < b`, ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/PreferEqualityComparisonOverDifferenceCheck.java"
    },
    {
      "className": "RenameExceptionInEmptyCatch",
      "displayName": "Rename caught exceptions in empty catch blocks to `ignored`",
      "description": "Renames caught exceptions in empty catch blocks to `ignored`. `ignored` will be incremented by 1 if a namespace conflict exists.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RenameExceptionInEmptyCatch.java"
    },
    {
      "className": "FinalizeLocalVariables",
      "displayName": "Finalize local variables",
      "description": "Adds the `final` modifier keyword to local variables which are not reassigned.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/FinalizeLocalVariables.java"
    },
    {
      "className": "UpperCaseLiteralSuffixes",
      "displayName": "Upper case literal suffixes",
      "description": "Using upper case literal suffixes for declaring literals is less ambiguous, e.g., `1l` versus `1L`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UpperCaseLiteralSuffixes.java"
    },
    {
      "className": "SimplifyBooleanExpressionWithDeMorgan",
      "displayName": "Simplify boolean expressions using De Morgan's laws",
      "description": "Applies De Morgan's laws to simplify boolean expressions with negation. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/SimplifyBooleanExpressionWithDeMorgan.java"
    },
    {
      "className": "NoEqualityInForCondition",
      "displayName": "Use comparison rather than equality checks in for conditions",
      "description": "Testing for loop termination using an equality operator (`==` and `!=`) is dangerous, because it could set up an infinite loop. Using a relational operator instead makes it harder to accidentally write an infinite loop.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NoEqualityInForCondition.java"
    },
    {
      "className": "SimplifyArraysAsList",
      "displayName": "Simplify `Arrays.asList(..)` with varargs",
      "description": "Simplifies `Arrays.asList()` method calls that use explicit array creation to use varargs instead. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/SimplifyArraysAsList.java"
    },
    {
      "className": "CaseInsensitiveComparisonsDoNotChangeCase",
      "displayName": "CaseInsensitive comparisons do not alter case",
      "description": "Remove `String#toLowerCase()` or `String#toUpperCase()` from `String#equalsIgnoreCase(..)` comparisons.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/CaseInsensitiveComparisonsDoNotChangeCase.java"
    },
    {
      "className": "ChainStringBuilderAppendCalls",
      "displayName": "Chain `StringBuilder.append()` calls",
      "description": "String concatenation within calls to `StringBuilder.append()` causes unnecessary memory allocation. Except for concatenations of String literals, which are joined together at compile time. Replaces inefficient concatenations with chained calls to `StringBuilder.append()`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ChainStringBuilderAppendCalls.java"
    },
    {
      "className": "ModifierOrder",
      "displayName": "Modifier order",
      "description": "Modifiers should be declared in the correct order as recommended by the JLS.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ModifierOrder.java"
    },
    {
      "className": "DefaultComesLast",
      "displayName": "Default comes last",
      "description": "Ensure the `default` case comes last after all the cases in a switch statement.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/DefaultComesLast.java"
    },
    {
      "className": "UnnecessaryCloseInTryWithResources",
      "displayName": "Unnecessary close in try-with-resources",
      "description": "Remove unnecessary `AutoCloseable#close()` statements in try-with-resources.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UnnecessaryCloseInTryWithResources.java"
    },
    {
      "className": "PreferIncrementOperator",
      "displayName": "Prefer increment/decrement and compound assignment operators",
      "description": "Prefer the use of increment and decrement operators (`++`, `--`, `+=`, `-=`) over their more verbose equivalents.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/PreferIncrementOperator.java"
    },
    {
      "className": "ControlFlowIndentation",
      "displayName": "Control flow statement indentation",
      "description": "Program flow control statements like `if`, `while`, and `for` can omit curly braces when they apply to ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ControlFlowIndentation.java"
    },
    {
      "className": "RemoveUnneededBlock",
      "displayName": "Remove unneeded block",
      "description": "Flatten blocks into inline statements when possible.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveUnneededBlock.java"
    },
    {
      "className": "AddSerialVersionUidToSerializable",
      "displayName": "Add `serialVersionUID` to a `Serializable` class when missing",
      "description": "A `serialVersionUID` field is strongly recommended in all `Serializable` classes. If this is not ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/AddSerialVersionUidToSerializable.java"
    },
    {
      "className": "RemoveRedundantNullCheckBeforeInstanceof",
      "displayName": "Remove redundant null checks before instanceof",
      "description": "Removes redundant null checks before instanceof operations since instanceof returns false for null.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveRedundantNullCheckBeforeInstanceof.java"
    },
    {
      "className": "EmptyBlock",
      "displayName": "Remove empty blocks",
      "description": "Remove empty blocks that effectively do nothing.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/EmptyBlock.java"
    },
    {
      "className": "NoFinalizer",
      "displayName": "Remove `finalize()` method",
      "description": "Finalizers are deprecated. Use of `finalize()` can lead to performance issues, deadlocks, hangs, and other undesirable behavior.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NoFinalizer.java"
    },
    {
      "className": "NoEmptyCollectionWithRawType",
      "displayName": "Use `Collections#emptyList()`, `emptyMap()`, and `emptySet()`",
      "description": "Replaces `Collections#EMPTY_...` with methods that return generic types.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NoEmptyCollectionWithRawType.java"
    },
    {
      "className": "RemoveExtraSemicolons",
      "displayName": "Remove extra semicolons",
      "description": "",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveExtraSemicolons.java"
    },
    {
      "className": "FinalClass",
      "displayName": "Finalize classes with private constructors",
      "description": "Adds the `final` modifier to classes that expose no public or package-private constructors.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/FinalClass.java"
    },
    {
      "className": "ReplaceStringBuilderWithString",
      "displayName": "Replace `StringBuilder#append` with `String`",
      "description": "Replace `StringBuilder.append()` with String if you are only concatenating a small number of strings ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceStringBuilderWithString.java"
    },
    {
      "className": "UseDiamondOperator",
      "displayName": "Use the diamond operator",
      "description": "The diamond operator (`<>`) should be used. Java 7 introduced the diamond operator to ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseDiamondOperator.java"
    },
    {
      "className": "RemoveInstanceOfPatternMatch",
      "displayName": "Removes from code Java 14's `instanceof` pattern matching",
      "description": "Adds an explicit variable declaration at the beginning of `if` statement instead of `instanceof` pattern matching.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveInstanceOfPatternMatch.java"
    },
    {
      "className": "AnnotateNullableParameters",
      "displayName": "Annotate null-checked method parameters with `@Nullable`",
      "description": "Add `@Nullable` to parameters of public methods that are explicitly checked for `null`. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/AnnotateNullableParameters.java"
    },
    {
      "className": "AvoidBoxedBooleanExpressions",
      "displayName": "Avoid boxed boolean expressions",
      "description": "Under certain conditions the `java.lang.Boolean` type is used as an expression, ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/AvoidBoxedBooleanExpressions.java"
    },
    {
      "className": "OnlyCatchDeclaredExceptions",
      "displayName": "Replace `catch(Exception)` with specific declared exceptions thrown in the try block",
      "description": "Replaces `catch(Exception e)` blocks with a multi-catch block ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/OnlyCatchDeclaredExceptions.java"
    },
    {
      "className": "SimplifyConsecutiveAssignments",
      "displayName": "Simplify consecutive assignments",
      "description": "Combine consecutive assignments into a single statement where possible.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/SimplifyConsecutiveAssignments.java"
    },
    {
      "className": "RemoveUnusedLocalVariables",
      "displayName": "Remove unused local variables",
      "description": "If a local variable is declared but not used, it is dead code and should be removed.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveUnusedLocalVariables.java"
    },
    {
      "className": "WriteOctalValuesAsDecimal",
      "displayName": "Write octal values as decimal",
      "description": "Developers may not recognize octal values as such, mistaking them instead for decimal values.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/WriteOctalValuesAsDecimal.java"
    },
    {
      "className": "EqualsAvoidsNull",
      "displayName": "Equals avoids null",
      "description": "Checks that any combination of String literals is on the left side of an `equals()` comparison. Also checks for String literals assigned to some field (such as `someString.equals(anotherString = \\",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/EqualsAvoidsNull.java"
    },
    {
      "className": "ReplaceCollectionToArrayArgWithEmptyArray",
      "displayName": "Use Empty Array for `Collection.toArray()`",
      "description": "Changes new array creation with `Collection#toArray(T[])` to use an empty array argument, which is better for performance.\\n",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceCollectionToArrayArgWithEmptyArray.java"
    },
    {
      "className": "RemoveSystemOutPrintln",
      "displayName": "Remove `System.out#println` statements",
      "description": "Print statements are often left accidentally after debugging an issue.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RemoveSystemOutPrintln.java"
    },
    {
      "className": "ReorderAnnotations",
      "displayName": "Reorder annotations alphabetically",
      "description": "Consistently order annotations by comparing their simple name.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReorderAnnotations.java"
    },
    {
      "className": "FinalizeMethodArguments",
      "displayName": "Finalize method arguments",
      "description": "Adds the `final` modifier keyword to method parameters.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/FinalizeMethodArguments.java"
    },
    {
      "className": "ReplaceWeekYearWithYear",
      "displayName": "Week Year (YYYY) should not be used for date formatting",
      "description": "For most dates Week Year (YYYY) and Year (yyyy) yield the same results. However, on the last week of ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceWeekYearWithYear.java"
    },
    {
      "className": "NoRedundantJumpStatements",
      "displayName": "Jump statements should not be redundant",
      "description": "Jump statements such as return and continue let you change the default flow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/NoRedundantJumpStatements.java"
    },
    {
      "className": "UseLambdaForFunctionalInterface",
      "displayName": "Use lambda expressions instead of anonymous classes",
      "description": "Instead of anonymous class declarations, use a lambda where possible. Using lambdas to replace ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/UseLambdaForFunctionalInterface.java"
    },
    {
      "className": "RenameMethodsNamedHashcodeEqualOrToString",
      "displayName": "Rename methods named `hashcode`, `equal`, or `tostring`",
      "description": "Methods should not be named `hashcode`, `equal`, or `tostring`. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/RenameMethodsNamedHashcodeEqualOrToString.java"
    },
    {
      "className": "CombineSemanticallyEqualCatchBlocks",
      "displayName": "Combine semantically equal catch blocks",
      "description": "Combine catches in a try that contain semantically equivalent blocks. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/CombineSemanticallyEqualCatchBlocks.java"
    },
    {
      "className": "FinalizePrivateFields",
      "displayName": "Finalize private fields",
      "description": "Adds the `final` modifier keyword to private instance variables which are not reassigned.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/FinalizePrivateFields.java"
    },
    {
      "className": "FixStringFormatExpressions",
      "displayName": "Fix `String#format` and `String#formatted` expressions",
      "description": "Fix `String#format` and `String#formatted` expressions by replacing `\\\\n` newline characters with `%n` and removing any unused arguments. Note this recipe is scoped to only transform format expressions which do not specify the argument index.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/FixStringFormatExpressions.java"
    },
    {
      "className": "ReplaceClassIsInstanceWithInstanceof",
      "displayName": "Replace `A.class.isInstance(a)` with `a instanceof A`",
      "description": "There should be no `A.class.isInstance(a)`, it should be replaced by `a instanceof A`.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/ReplaceClassIsInstanceWithInstanceof.java"
    },
    {
      "className": "MoveConditionsToWhile",
      "displayName": "Convert `while (true)` with initial `if` break to loop condition",
      "description": "Simplifies `while (true)` loops where the first statement is an `if` statement that only contains a `break`. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/MoveConditionsToWhile.java"
    },
    {
      "className": "MultipleVariableDeclarations",
      "displayName": "No multiple variable declarations",
      "description": "Places each variable declaration in its own statement and on its own line. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/MultipleVariableDeclarations.java"
    },
    {
      "className": "SimplifyDurationCreationUnits",
      "displayName": "Simplify `java.time.Duration` units",
      "description": "Simplifies `java.time.Duration` units to be more human-readable.",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/SimplifyDurationCreationUnits.java"
    },
    {
      "className": "MavenJavadocNonAsciiRecipe",
      "displayName": "Remove non-ASCII characters from Javadoc",
      "description": "Maven's javadoc-plugin configuration does not support non-ASCII characters. ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/maven/MavenJavadocNonAsciiRecipe.java"
    },
    {
      "className": "MoveFieldAnnotationToType",
      "displayName": "Move annotation to type instead of field",
      "description": "Annotations that could be applied to either a field or a ",
      "recipeType": "Static Analysis",
      "repository": "rewrite-static-analysis",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-static-analysis/src/main/java/org/openrewrite/staticanalysis/java/MoveFieldAnnotationToType.java"
    },
    {
      "className": "MaybeAddLoggerToClass",
      "displayName": "Add logger to class",
      "description": "Test recipe.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/test/java/org/openrewrite/java/logging/AddLoggerTest.java"
    },
    {
      "className": "ChangeLoggersToPrivate",
      "displayName": "Change logger fields to `private`",
      "description": "Ensures that logger fields are declared as `private` to encapsulate logging mechanics within the class.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/ChangeLoggersToPrivate.java"
    },
    {
      "className": "CatchBlockLogLevel",
      "displayName": "Catch block log level",
      "description": "Sometimes exceptions are caught and logged at the wrong log level. This will set the log level of ",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/CatchBlockLogLevel.java"
    },
    {
      "className": "SystemOutToLogging",
      "displayName": "Use logger instead of `System.out` print statements",
      "description": "Replace `System.out` print statements with a logger.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/SystemOutToLogging.java"
    },
    {
      "className": "PrintStackTraceToLogError",
      "displayName": "Use logger instead of `printStackTrace()`",
      "description": "When a logger is present, log exceptions rather than calling `printStackTrace()`.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/PrintStackTraceToLogError.java"
    },
    {
      "className": "SystemErrToLogging",
      "displayName": "Use logger instead of `System.err` print statements",
      "description": "Replace `System.err` print statements with a logger.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/SystemErrToLogging.java"
    },
    {
      "className": "ParameterizedLogging",
      "displayName": "Parameterize logging statements",
      "description": "Transform logging statements using concatenation for messages and variables into a parameterized format. ",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/ParameterizedLogging.java"
    },
    {
      "className": "ArgumentArrayToVarargs",
      "displayName": "Unpack Logger method `new Object[] {...}` into varargs",
      "description": "For Logger methods that support varargs, convert any final explicit `Object[]` arguments into their unpacked values.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/ArgumentArrayToVarargs.java"
    },
    {
      "className": "SystemPrintToLogging",
      "displayName": "Use logger instead of system print statements",
      "description": "Replace `System.out` and `System.err` print statements with a logger.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/SystemPrintToLogging.java"
    },
    {
      "className": "ChangeLombokLogAnnotation",
      "displayName": "Replace any Lombok log annotations with target logging framework annotation",
      "description": "Replace Lombok annotations such as `@CommonsLog` and `@Log4j` with the target logging framework annotation, or `@Sl4fj` if not provided.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/ChangeLombokLogAnnotation.java"
    },
    {
      "className": "LoggerLevelArgumentToMethod",
      "displayName": "Replace JBoss Logging Level arguments with the corresponding eponymous level method calls",
      "description": "Replace calls to `Logger.log(Level, ...)` with the corresponding eponymous level method calls. For example `Logger.log(Level.INFO, ...)` to `Logger.info(...)`.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/jboss/LoggerLevelArgumentToMethod.java"
    },
    {
      "className": "ChangeLogLevel",
      "displayName": "Change SLF4J log level",
      "description": "Change the log level of SLF4J log statements.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/slf4j/ChangeLogLevel.java"
    },
    {
      "className": "CompleteExceptionLogging",
      "displayName": "Enhances logging of exceptions by including the full stack trace in addition to the exception message",
      "description": "It is a common mistake to call `Exception.getMessage()` when passing an exception into a log method. ",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/slf4j/CompleteExceptionLogging.java"
    },
    {
      "className": "Slf4jLogShouldBeConstant",
      "displayName": "SLF4J logging statements should begin with constants",
      "description": "Logging statements shouldn't begin with `String#format`, calls to `toString()`, etc.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/slf4j/Slf4jLogShouldBeConstant.java"
    },
    {
      "className": "MatchIsLogLevelEnabledWithLogStatements",
      "displayName": "Match `if (is*Enabled())` with logging statements",
      "description": "Change any `if (is*Enabled())` statements that do not match the maximum log level used in the `then` ",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/slf4j/MatchIsLogLevelEnabledWithLogStatements.java"
    },
    {
      "className": "WrapExpensiveLogStatementsInConditionals",
      "displayName": "Wrap expensive log statements in conditionals",
      "description": "When trace, debug and info log statements use methods for constructing log messages, ",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/slf4j/WrapExpensiveLogStatementsInConditionals.java"
    },
    {
      "className": "JulParameterizedArguments",
      "displayName": "Replace parameterized JUL level call with corresponding SLF4J method calls",
      "description": "Replace calls to parameterized `Logger.log(Level,String,…)` call with the corresponding slf4j method calls transforming the formatter and parameter lists.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/slf4j/JulParameterizedArguments.java"
    },
    {
      "className": "LoggersNamedForEnclosingClass",
      "displayName": "Loggers should be named for their enclosing classes",
      "description": "Ensure `LoggerFactory#getLogger(Class)` is called with the enclosing class as argument.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/slf4j/LoggersNamedForEnclosingClass.java"
    },
    {
      "className": "StripToStringFromArguments",
      "displayName": "Strip `toString()` from arguments",
      "description": "Remove `.toString()` from logger call arguments; SLF4J will automatically call `toString()` on an argument when not a string, and do so only if the log level is enabled.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/slf4j/StripToStringFromArguments.java"
    },
    {
      "className": "Log4jAppenderToLogback",
      "displayName": "Migrate Log4j 2.x Appender to logback-classic equivalents",
      "description": "Migrates custom Log4j 2.x Appender components to `logback-classic`. This recipe operates on the following assumptions: ",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/logback/Log4jAppenderToLogback.java"
    },
    {
      "className": "ConfigureLoggerLevel",
      "displayName": "Configure logback logger level",
      "description": "Within logback.xml configuration files sets the specified log level for a particular class. ",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/logback/ConfigureLoggerLevel.java"
    },
    {
      "className": "Log4jLayoutToLogback",
      "displayName": "Migrate Log4j 2.x Layout to logback-classic equivalents",
      "description": "Migrates custom Log4j 2.x Layout components to `logback-classic`. This recipe operates on the following assumptions: ",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/logback/Log4jLayoutToLogback.java"
    },
    {
      "className": "PrependRandomName",
      "displayName": "Prepend a random name to each Log4J statement",
      "description": "To make finding the callsite of a logging statement easier in code search.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/log4j/PrependRandomName.java"
    },
    {
      "className": "ConvertJulExiting",
      "displayName": "Rewrites JUL's Logger#exiting method to Log4j API",
      "description": "Replaces JUL's Logger#exiting method calls to Log4j API Logger#traceEntry calls.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/log4j/ConvertJulExiting.java"
    },
    {
      "className": "ConvertJulEntering",
      "displayName": "Rewrites JUL's Logger#entering method to Log4j API",
      "description": "Replaces JUL's Logger#entering method calls to Log4j API Logger#traceEntry calls.",
      "recipeType": "Logging",
      "repository": "rewrite-logging-frameworks",
      "filePath": "/Users/manethninduwara/Developer/openRewrite/rewrite-logging-frameworks/src/main/java/org/openrewrite/java/logging/log4j/ConvertJulEntering.java"
    }
  ]
}